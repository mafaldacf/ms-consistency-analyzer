(*OrderServiceImpl).CreateOrder(ctx context.Context, cartID string, userID string, productID string, quantity int, price int):
- DATASTORE CALL @ order_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}
- SERVICE CALL @ ReserveStock >> (*shopping_app.StockServiceImpl).ReserveStock(ctx context.Context, productID string, quantity int) error
- SERVICE CALL @ CreateBill >> (*shopping_app.BillingServiceImpl).CreateBill(ctx context.Context, userID string, productID string, quantity int, pricePerUnit int) error
- SERVICE CALL @ GetProduct >> (*shopping_app.ProductServiceImpl).GetProduct(ctx context.Context, productID string) (shopping_app.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
- DATASTORE CALL @ analytics_queue >> Queue.Push(ctx context.Context, item interface{})
  (err, interface{})
- DATASTORE CALL @ shipment_queue >> Queue.Push(ctx context.Context, item interface{})
  (err, interface{})

(*OrderServiceImpl).ReadOrder(ctx context.Context, orderID string):
- DATASTORE CALL @ order_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

.NewAnalyticsServiceImpl(ctx context.Context, analytics_db NoSQLDatabase, analytics_queue Queue): []

.NewBillingServiceImpl(ctx context.Context, bill_db NoSQLDatabase): []

.NewCartServiceImpl(ctx context.Context, order_service shopping_app.OrderService, product_service shopping_app.ProductService, cart_db NoSQLDatabase)
:
 []

.NewFrontendImpl(ctx context.Context, order_service shopping_app.OrderService, cart_service shopping_app.CartService): []

.NewOrderServiceImpl(ctx context.Context, stock_service shopping_app.StockService, billing_service shopping_app.BillingService, product_service shopping_app.ProductService, order_db NoSQLDatabase, shipment_queue Queue, analytics_queue Queue)
:
 []

.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase): []

.NewShipmentServiceImpl(ctx context.Context, order_service shopping_app.OrderService, shipment_db NoSQLDatabase, shipment_queue Queue)
:
 []

.NewStockServiceImpl(ctx context.Context, stock_db NoSQLDatabase): []
