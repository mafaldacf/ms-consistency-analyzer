(*ShipmentServiceImpl).Run(ctx context.Context):
- INTERNAL CALL >> (*shopping_app.ShipmentServiceImpl).workerThread(ctx context.Context)
  error

(*ShipmentServiceImpl).createPendingShipment(ctx context.Context, message shopping_app.ShipmentMessage struct{OrderID string, UserID string})
:
	- DATASTORE CALL @ shipment_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}
  - SERVICE CALL @ ReadOrder >> (*shopping_app.OrderServiceImpl).ReadOrder(ctx context.Context, orderID string) (shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp int64}, error)

(*ShipmentServiceImpl).workerThread(ctx context.Context):
- DATASTORE CALL @ shipment_queue >> Queue.Pop(ctx context.Context, item interface{})
  (err, interface{})
- INTERNAL CALL >> (*shopping_app.ShipmentServiceImpl).createPendingShipment(ctx context.Context, message shopping_app.ShipmentMessage struct{OrderID string, UserID string}) error

.NewAnalyticsServiceImpl(ctx context.Context, analytics_db NoSQLDatabase, analytics_queue Queue): []

.NewBillingServiceImpl(ctx context.Context, bill_db NoSQLDatabase): []

.NewCartServiceImpl(ctx context.Context, order_service shopping_app.OrderService, product_service shopping_app.ProductService, cart_db NoSQLDatabase)
:
 []

.NewFrontendImpl(ctx context.Context, order_service shopping_app.OrderService, cart_service shopping_app.CartService): []

.NewOrderServiceImpl(ctx context.Context, stock_service shopping_app.StockService, billing_service shopping_app.BillingService, product_service shopping_app.ProductService, order_db NoSQLDatabase, shipment_queue Queue, analytics_queue Queue)
:
 []

.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase): []

.NewShipmentServiceImpl(ctx context.Context, order_service shopping_app.OrderService, shipment_db NoSQLDatabase, shipment_queue Queue)
:
 []

.NewStockServiceImpl(ctx context.Context, stock_db NoSQLDatabase): []
