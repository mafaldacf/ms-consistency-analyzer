(*CartServiceImpl).AddProductToCart(ctx context.Context, cartID string, productID string):
- SERVICE CALL @ GetProduct >> (*shopping_app.ProductServiceImpl).GetProduct(ctx context.Context, productID string) (shopping_app.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
- DATASTORE CALL @ cart_db >> NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
- DATASTORE CALL @ cart_db >> NoSQLDatabase.InsertOne(ctx context.Context, document interface{}) interface{}

(*CartServiceImpl).Checkout(ctx context.Context, cartID string):
- DATASTORE CALL @ cart_db >> NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
- DATASTORE CALL @ cart_db >> NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})
- SERVICE CALL @ CreateOrder >> (*shopping_app.OrderServiceImpl).CreateOrder(ctx context.Context, cartID string, userID string, productID string, quantity int, price int) error
- DATASTORE CALL @ cart_db >> NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D) interface{}

.NewAnalyticsServiceImpl(ctx context.Context, analytics_db NoSQLDatabase, analytics_queue Queue): []

.NewBillingServiceImpl(ctx context.Context, bill_db NoSQLDatabase): []

.NewCartServiceImpl(ctx context.Context, order_service shopping_app.OrderService, product_service shopping_app.ProductService, cart_db NoSQLDatabase)
:
 []

.NewFrontendImpl(ctx context.Context, order_service shopping_app.OrderService, cart_service shopping_app.CartService): []

.NewOrderServiceImpl(ctx context.Context, stock_service shopping_app.StockService, billing_service shopping_app.BillingService, product_service shopping_app.ProductService, order_db NoSQLDatabase, shipment_queue Queue, analytics_queue Queue)
:
 []

.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase): []

.NewShipmentServiceImpl(ctx context.Context, order_service shopping_app.OrderService, shipment_db NoSQLDatabase, shipment_queue Queue)
:
 []

.NewStockServiceImpl(ctx context.Context, stock_db NoSQLDatabase): []
