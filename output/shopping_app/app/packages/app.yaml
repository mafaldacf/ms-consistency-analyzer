"":
- package: ""
- package path: github.com/blueprint-uservices/blueprint/examples/shopping_app/workflow/...
- module: ""
- files: []
- imports: []
- imported types: []
- declared types: []
- service types: []
- datastore types: []
- declared variables: []
- parsed methods: []

shopping_app:
- package: shopping_app
- package path: github.com/blueprint-uservices/blueprint/examples/shopping_app/workflow/shopping_app
- module: github.com/blueprint-uservices/blueprint/examples/shopping_app/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/AnalyticsService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/BillingService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/CartService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/Frontend.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/OrderService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/ProductService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/ShipmentService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/StockService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_app/workflow/shopping_app/models.go
- imports:
  - context
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - go.mongodb.org/mongo-driver/bson
  - sync
- imported types:
  - .error
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
  - atomic.Uint64
  - atomic.align64
  - atomic.noCopy
  - context.Context
  - primitive.D
  - primitive.E
  - sync.WaitGroup
  - sync.noCopy
- declared types:
  - shopping_app.Analytics struct{UserID string, Categories []string}
  - shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string}
  - shopping_app.AnalyticsService
  - shopping_app.AnalyticsServiceImpl struct{analytics_db {instance = analytics_db}
    interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, analytics_queue  {instance = analytics_queue} interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})},
    num_workers int}
  - shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost int}
  - shopping_app.BillingService
  - shopping_app.BillingServiceImpl struct{bill_db {instance = billing_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
  - shopping_app.Cart struct{CartID string, UserID string, ProductID string, Quantity int, PricePerUnit int, Status string}
  - shopping_app.CartService
  - shopping_app.CartServiceImpl struct{order_service shopping_app.OrderService, product_service shopping_app.ProductService, cart_db {instance = cart_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
  - shopping_app.Frontend
  - shopping_app.FrontendImpl struct{cart_service shopping_app.CartService, order_service shopping_app.OrderService}
  - shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp int64}
  - shopping_app.OrderService
  - shopping_app.OrderServiceImpl struct{stock_service shopping_app.StockService, billing_service shopping_app.BillingService, product_service shopping_app.ProductService, order_db {instance = order_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, shipment_queue  {instance = shipment_queue}
    interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}, analytics_queue  {instance = analytics_queue} interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}}
  - shopping_app.Product struct{ProductID string, Description string, PricePerUnit int, Category string}
  - shopping_app.ProductService
  - shopping_app.ProductServiceImpl struct{product_db {instance = product_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
  - shopping_app.Shipment struct{OrderID string, UserID string, Status string}
  - shopping_app.ShipmentMessage struct{OrderID string, UserID string}
  - shopping_app.ShipmentService
  - shopping_app.ShipmentServiceImpl struct{order_service shopping_app.OrderService, shipment_db {instance = shipment_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, shipment_queue  {instance = shipment_queue} interface{Queue.Push(ctx context.Context, item interface{}),
    Queue.Pop(ctx context.Context, item interface{})}, num_workers int}
  - shopping_app.Stock struct{ProductID string, Quantity int}
  - shopping_app.StockService
  - shopping_app.StockServiceImpl struct{stock_db {instance = stock_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
- service types:
  - shopping_app.AnalyticsService
  - shopping_app.BillingService
  - shopping_app.CartService
  - shopping_app.Frontend
  - shopping_app.OrderService
  - shopping_app.ProductService
  - shopping_app.ShipmentService
  - shopping_app.StockService
- datastore types:
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
- declared variables: []
- parsed methods:
  - (*shopping_app.AnalyticsServiceImpl).Run(ctx context.Context) error
  - (*shopping_app.AnalyticsServiceImpl).updateAnalytics(ctx context.Context, message shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string}) error
  - (*shopping_app.AnalyticsServiceImpl).workerThread(ctx context.Context) error
  - (*shopping_app.BillingServiceImpl).CreateBill(ctx context.Context, userID string, productID string, quantity int, pricePerUnit int) error
  - (*shopping_app.CartServiceImpl).AddProductToCart(ctx context.Context, cartID string, productID string) error
  - (*shopping_app.CartServiceImpl).Checkout(ctx context.Context, cartID string) error
  - (*shopping_app.FrontendImpl).AddProductToCart(ctx context.Context, cartID string, productID string) error
  - (*shopping_app.FrontendImpl).Checkout(ctx context.Context, cartID string, userID string, productID string, quantity int, price int) error
  - (*shopping_app.FrontendImpl).ReadOrder(ctx context.Context, orderID string) (shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp int64}, error)
  - (*shopping_app.OrderServiceImpl).CreateOrder(ctx context.Context, cartID string, userID string, productID string, quantity int, price int) error
  - (*shopping_app.OrderServiceImpl).ReadOrder(ctx context.Context, orderID string)
    (shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp int64}, error)
  - (*shopping_app.ProductServiceImpl).CreateProduct(ctx context.Context, productID string, description string, pricePerUnit int, category string) (shopping_app.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - (*shopping_app.ProductServiceImpl).GetProduct(ctx context.Context, productID string)
    (shopping_app.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - (*shopping_app.ShipmentServiceImpl).Run(ctx context.Context) error
  - (*shopping_app.ShipmentServiceImpl).createPendingShipment(ctx context.Context, message shopping_app.ShipmentMessage struct{OrderID string, UserID string}) error
  - (*shopping_app.ShipmentServiceImpl).workerThread(ctx context.Context) error
  - (*shopping_app.StockServiceImpl).ReserveStock(ctx context.Context, productID string, quantity int) error
  - shopping_app.NewAnalyticsServiceImpl(ctx context.Context, analytics_db NoSQLDatabase, analytics_queue Queue) (shopping_app.AnalyticsService, error)
  - shopping_app.NewBillingServiceImpl(ctx context.Context, bill_db NoSQLDatabase)
    (shopping_app.BillingService, error)
  - shopping_app.NewCartServiceImpl(ctx context.Context, order_service shopping_app.OrderService, product_service shopping_app.ProductService, cart_db NoSQLDatabase) (shopping_app.CartService, error)
  - shopping_app.NewFrontendImpl(ctx context.Context, order_service shopping_app.OrderService, cart_service shopping_app.CartService) (shopping_app.Frontend, error)
  - shopping_app.NewOrderServiceImpl(ctx context.Context, stock_service shopping_app.StockService, billing_service shopping_app.BillingService, product_service shopping_app.ProductService, order_db NoSQLDatabase, shipment_queue Queue, analytics_queue Queue) (shopping_app.OrderService, error)
  - shopping_app.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase)
    (shopping_app.ProductService, error)
  - shopping_app.NewShipmentServiceImpl(ctx context.Context, order_service shopping_app.OrderService, shipment_db NoSQLDatabase, shipment_queue Queue) (shopping_app.ShipmentService, error)
  - shopping_app.NewStockServiceImpl(ctx context.Context, stock_db NoSQLDatabase)
    (shopping_app.StockService, error)
