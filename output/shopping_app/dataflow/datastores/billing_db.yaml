BILLING_DB.Bill:
- write <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>

BILLING_DB.Bill.PricePerUnit:
- write <pricePerUnit int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <price int> @ OrderService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <price int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <price int> @ Frontend (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <price int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <pricePerUnit int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <pricePerUnit int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <price int> @ OrderService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <price int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <price int> @ Frontend (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <price int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <pricePerUnit int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <PricePerUnit int (FieldObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>

BILLING_DB.Bill.ProductID:
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <productID string> @ OrderService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <productID string> @ Frontend (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <productID string> @ Frontend (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <productID string> @ Frontend (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <productID string (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <ref <productID string> @ OrderService (Reference)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <productID string (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <ref <productID string> @ Frontend (Reference)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <productID string (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <productID string (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <productID string (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <productID string (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <productID string> @ OrderService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <productID string> @ Frontend (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <productID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- read <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ CartService (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ Frontend (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ OrderService (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ Frontend (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ CartService (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ Frontend (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ OrderService (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <ref <productID string> @ Frontend (Reference)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- read <productID string (BasicObject)> from <productID string (BasicObject)>
- write <ProductID string (FieldObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>

BILLING_DB.Bill.Quantity:
- write <quantity int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <Quantity int (FieldObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>

BILLING_DB.Bill.TotalCost:
- write <quantity (&int) (AddressObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <quantity int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <quantity int> @ OrderService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <quantity int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <quantity int> @ Frontend (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <quantity int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <quantity int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <quantity int (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <quantity int> @ Frontend (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <quantity int> @ Frontend (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <quantity int (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <ref <quantity int> @ OrderService (Reference)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <quantity int (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <ref <quantity int> @ Frontend (Reference)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <quantity int (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <quantity int (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <quantity int (BasicObject)> from <stock shopping_app.Stock struct{ProductID string, Quantity int} (StructObject)>
- write <TotalCost (&int) (FieldObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>

BILLING_DB.Bill.UserID:
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <userID string> @ OrderService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <userID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <userID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <userID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <userID string (BasicObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <userID string (BasicObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <userID string (BasicObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <userID string> @ Frontend (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ AnalyticsService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ ShipmentService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- write <userID string (BasicObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <userID string (BasicObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <userID string (BasicObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <userID string> @ Frontend (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ AnalyticsService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ ShipmentService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- write <userID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <userID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <userID string (BasicObject)> from <order shopping_app.Order struct{OrderID string, UserID string, ProductID string, Quantity int, Timestamp 1 int} (StructObject)>
- write <userID string (BasicObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <userID string (BasicObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- write <userID string (BasicObject)> from <analyticsMessage shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string} (StructObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <userID string> @ Frontend (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ AnalyticsService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ ShipmentService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- write <userID string (BasicObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <userID string (BasicObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- write <userID string (BasicObject)> from <shipmentMessage shopping_app.ShipmentMessage struct{OrderID string, UserID string} (StructObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <userID string> @ Frontend (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ AnalyticsService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <ref <UserID interface{}> @ ShipmentService (Reference)> from <event (*map[string]interface{}) (PointerObject)>
- read <UserID interface{} (InterfaceObject)> from <event (*map[string]interface{}) (PointerObject)>
- read <userID string (BasicObject)> from <event (*map[string]interface{}) (PointerObject)>
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <userID string> @ OrderService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <userID string> @ Frontend (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <UserID interface{}> @ AnalyticsService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <ref <UserID interface{}> @ ShipmentService (Reference)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <UserID interface{} (InterfaceObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <userID string (BasicObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
- write <UserID string (FieldObject)> from <bill shopping_app.Bill struct{UserID string, ProductID string, Quantity int, PricePerUnit int, TotalCost (&int)} (StructObject)>
