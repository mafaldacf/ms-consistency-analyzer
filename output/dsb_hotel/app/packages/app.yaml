"":
- package: ""
- package path: github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation/...
- module: ""
- files: []
- imports (extracted from package): []
- imports (extracted from source files): []
- imported types: []
- imported constants: []
- imported variables: []
- declared types: []
- declared variables: []
- declared constants: []
- service types: []
- datastore types: []
- parsed methods: []

hotelreservation:
- package: hotelreservation
- package path: github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation
- module: github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/DataModels.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/FrontEndService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/GeoService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/ProfileService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/RateService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/RecommendationService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/ReservationService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/SearchService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/dsb_hotel/workflow/hotelreservation/UserService.go
- imports (extracted from package):
  - context
  - crypto/sha256
  - errors
  - fmt
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - github.com/hailocab/go-geoindex
  - go.mongodb.org/mongo-driver/bson
  - math
  - strconv
  - time
- imports (extracted from source files):
  - (backend) github.com/blueprint-uservices/blueprint/runtime/core/backend
  - (bson) go.mongodb.org/mongo-driver/bson
  - (geoindex) github.com/hailocab/go-geoindex
  - (go-geoindex) github.com/hailocab/go-geoindex
  - (sha256) crypto/sha256
  - context
  - errors
  - fmt
  - math
  - strconv
  - time
- imported types:
  - .error
  - Cache interface{Cache.Put(ctx context.Context, key string, value interface{}),
    Cache.Get(ctx context.Context, key string, value interface{})}
  - NoSQLCollection interface{NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.NoSQLCollection.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.UpdateMany(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.ReplaceOne(ctx context.Context, filter bson.D, interface{}), NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.NoSQLCollection.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.NoSQLCursor.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.NoSQLCursor.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - context.Context
  - go-geoindex.ClusteringIndex struct{streetLevel (*go-geoindex.PointsIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}), currentPosition map[string]hotelreservation.Point
    struct{Pid string, Plat float64, Plon float64}}), cityLevel (*go-geoindex.CountIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}),
    currentPosition map[string]hotelreservation.Point struct{Pid string, Plat float64, Plon float64}}), worldLevel (*go-geoindex.CountIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}), currentPosition map[string]hotelreservation.Point
    struct{Pid string, Plat float64, Plon float64}})}
  - go-geoindex.CountIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}), currentPosition map[string]hotelreservation.Point struct{Pid string, Plat float64, Plon float64}}
  - go-geoindex.Meters float64
  - go-geoindex.Point interface{Lon, Id, Lat, }
  - go-geoindex.PointsIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}), currentPosition map[string]hotelreservation.Point struct{Pid string, Plat float64, Plon float64}}
  - go-geoindex.cell struct{x int, y int}
  - go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}
  - primitive.D
  - primitive.E
  - time.Location struct{name string, zone []time.zone struct{name string, offset int, isDST bool}, tx []time.zoneTrans struct{when int64, index uint8, isstd bool, isutc bool}, extend string, cacheStart int64, cacheEnd int64, cacheZone (*time.zone struct{name string, offset int, isDST bool})}
  - time.Time struct{wall uint64, ext int64, loc (*time.Location struct{name string, zone []time.zone struct{name string, offset int, isDST bool}, tx []time.zoneTrans struct{when int64, index uint8, isstd bool, isutc bool}, extend string, cacheStart int64, cacheEnd int64, cacheZone (*time.zone struct{name string, offset int, isDST bool})})}
  - time.zone struct{name string, offset int, isDST bool}
  - time.zoneTrans struct{when int64, index uint8, isstd bool, isutc bool}
- imported constants: []
- imported variables: []
- declared types:
  - hotelreservation.Address struct{StreetNumber string, StreetName string, City string, State string, Country string, PostalCode string, Lat float64, Lon float64}
  - hotelreservation.FrontEndService
  - hotelreservation.FrontEndServiceImpl struct{searchService hotelreservation.SearchService, profileService hotelreservation.ProfileService, recommendationService hotelreservation.RecommendationService, userService hotelreservation.UserService, reservationService hotelreservation.ReservationService}
  - hotelreservation.GeoService
  - hotelreservation.GeoServiceImpl struct{geoDB NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, index (*go-geoindex.ClusteringIndex struct{streetLevel (*go-geoindex.PointsIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}), currentPosition map[string]hotelreservation.Point
    struct{Pid string, Plat float64, Plon float64}}), cityLevel (*go-geoindex.CountIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}),
    currentPosition map[string]hotelreservation.Point struct{Pid string, Plat float64, Plon float64}}), worldLevel (*go-geoindex.CountIndex struct{index (*go-geoindex.geoIndex struct{resolution go-geoindex.Meters float64, index map[go-geoindex.cell struct{x int, y int}]interface{}, newEntry interface{}}), currentPosition map[string]hotelreservation.Point
    struct{Pid string, Plat float64, Plon float64}})})}
  - hotelreservation.Hotel struct{HId string, HLat float64, HLon float64, HRate float64, HPrice float64}
  - hotelreservation.HotelNumber struct{HotelId string, Number int64}
  - hotelreservation.HotelProfile struct{ID string, Name string, PhoneNumber string, Description string, Address hotelreservation.Address struct{StreetNumber string, StreetName string, City string, State string, Country string, PostalCode string, Lat float64, Lon float64}}
  - hotelreservation.Point struct{Pid string, Plat float64, Plon float64}
  - hotelreservation.ProfileService
  - hotelreservation.ProfileServiceImpl struct{profileCache Cache interface{Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{})}, profileDB NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
  - hotelreservation.RatePlan struct{HotelID string, Code string, InDate string, OutDate string, RType hotelreservation.RoomType struct{BookableRate float64, Code string, RoomDescription string, TotalRate float64, TotalRateInclusive float64}}
  - hotelreservation.RateService
  - hotelreservation.RateServiceImpl struct{rateCache Cache interface{Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{})}, rateDB NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
  - hotelreservation.RecommendationService
  - hotelreservation.RecommendationServiceImpl struct{recommendDB NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, hotels map[string]hotelreservation.Hotel
    struct{HId string, HLat float64, HLon float64, HRate float64, HPrice float64}}
  - hotelreservation.Reservation struct{HotelId string, CustomerName string, InDate string, OutDate string, Number int64}
  - hotelreservation.ReservationService
  - hotelreservation.ReservationServiceImpl struct{reserveCache Cache interface{Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{})}, reserveDB NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, CacheHits int64, NumRequests
    int64}
  - hotelreservation.RoomType struct{BookableRate float64, Code string, RoomDescription string, TotalRate float64, TotalRateInclusive float64}
  - hotelreservation.SearchService
  - hotelreservation.SearchServiceImpl struct{geoService hotelreservation.GeoService, rateService hotelreservation.RateService}
  - hotelreservation.User struct{Username string, Password string}
  - hotelreservation.UserService
  - hotelreservation.UserServiceImpl struct{users map[string]string, userDB NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
- declared variables: []
- declared constants:
  - MAXSEARCHRADIUS 10 untyped int
  - MAXSEARCHRESULTS 5 untyped int
- service types:
  - hotelreservation.FrontEndService
  - hotelreservation.GeoService
  - hotelreservation.ProfileService
  - hotelreservation.RateService
  - hotelreservation.RecommendationService
  - hotelreservation.ReservationService
  - hotelreservation.SearchService
  - hotelreservation.UserService
- datastore types:
  - Cache interface{Cache.Put(ctx context.Context, key string, value interface{}),
    Cache.Get(ctx context.Context, key string, value interface{})}
  - NoSQLCollection interface{NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.NoSQLCollection.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.UpdateMany(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.ReplaceOne(ctx context.Context, filter bson.D, interface{}), NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.NoSQLCollection.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.NoSQLCursor.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.NoSQLCursor.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
- parsed methods:
  - (*hotelreservation.FrontEndServiceImpl).RecommendHandler(ctx context.Context, lat float64, lon float64, require string, locale string) ([]hotelreservation.HotelProfile struct{ID string, Name string, PhoneNumber string, Description string, Address hotelreservation.Address struct{StreetNumber string, StreetName string, City string, State string, Country string, PostalCode string, Lat float64, Lon float64}}, error)
  - (*hotelreservation.FrontEndServiceImpl).ReservationHandler(ctx context.Context, inDate string, outDate string, hotelId string, customerName string, username string, password string, roomNumber int64) (string, error)
  - (*hotelreservation.FrontEndServiceImpl).SearchHandler(ctx context.Context, customerName string, inDate string, outDate string, lat float64, lon float64, locale string)
    ([]hotelreservation.HotelProfile struct{ID string, Name string, PhoneNumber string, Description string, Address hotelreservation.Address struct{StreetNumber string, StreetName string, City string, State string, Country string, PostalCode string, Lat float64, Lon float64}}, error)
  - (*hotelreservation.FrontEndServiceImpl).UserHandler(ctx context.Context, username string, password string) (string, error)
  - (*hotelreservation.GeoServiceImpl).Nearby(ctx context.Context, lat float64, lon float64) ([]string, error)
  - (*hotelreservation.GeoServiceImpl).getNearbyPoints(lat float64, lon float64) []go-geoindex.Point
    interface{ interface{Id() string; Lat() float64; Lon() float64} }
  - (*hotelreservation.GeoServiceImpl).newGeoIndex(ctx context.Context) error
  - (*hotelreservation.ProfileServiceImpl).GetProfiles(ctx context.Context, hotelIds []string, locale string) ([]hotelreservation.HotelProfile struct{ID string, Name string, PhoneNumber string, Description string, Address hotelreservation.Address struct{StreetNumber string, StreetName string, City string, State string, Country string, PostalCode string, Lat float64, Lon float64}}, error)
  - (*hotelreservation.RateServiceImpl).GetRates(ctx context.Context, hotelIDs []string, inDate string, outDate string) ([]hotelreservation.RatePlan struct{HotelID string, Code string, InDate string, OutDate string, RType hotelreservation.RoomType struct{BookableRate float64, Code string, RoomDescription string, TotalRate float64, TotalRateInclusive float64}}, error)
  - (*hotelreservation.RecommendationServiceImpl).GetRecommendations(ctx context.Context, require string, lat float64, lon float64) ([]string, error)
  - (*hotelreservation.RecommendationServiceImpl).LoadRecommendations(ctx context.Context)
    error
  - (*hotelreservation.ReservationServiceImpl).CheckAvailability(ctx context.Context, customerName string, hotelIds []string, inDate string, outDate string, roomNumber int64) ([]string, error)
  - (*hotelreservation.ReservationServiceImpl).MakeReservation(ctx context.Context, customerName string, hotelIds []string, inDate string, outDate string, roomNumber int64) ([]string, error)
  - (*hotelreservation.SearchServiceImpl).Nearby(ctx context.Context, lat float64, lon float64, inDate string, outDate string) ([]string, error)
  - (*hotelreservation.UserServiceImpl).CheckUser(ctx context.Context, username string, password string) (bool, error)
  - (*hotelreservation.UserServiceImpl).LoadUsers(ctx context.Context) error
  - hotelreservation.Address.remote()
  - hotelreservation.Hotel.remote()
  - hotelreservation.HotelNumber.remote()
  - hotelreservation.HotelProfile.remote()
  - hotelreservation.NewFrontEndServiceImpl(ctx context.Context, searchService hotelreservation.SearchService, profileService hotelreservation.ProfileService, recommendationService hotelreservation.RecommendationService, userService hotelreservation.UserService, reservationService hotelreservation.ReservationService)
    (hotelreservation.FrontEndService, error)
  - hotelreservation.NewGeoServiceImpl(ctx context.Context, geoDB NoSQLDatabase) (hotelreservation.GeoService, error)
  - hotelreservation.NewProfileServiceImpl(ctx context.Context, profileCache Cache, profileDB NoSQLDatabase) (hotelreservation.ProfileService, error)
  - hotelreservation.NewRateServiceImpl(ctx context.Context, rateCache Cache, rateDB NoSQLDatabase) (hotelreservation.RateService, error)
  - hotelreservation.NewRecommendationServiceImpl(ctx context.Context, recommendDB NoSQLDatabase) (hotelreservation.RecommendationService, error)
  - hotelreservation.NewReservationServiceImpl(ctx context.Context, reserveCache Cache, reserveDB NoSQLDatabase) (hotelreservation.ReservationService, error)
  - hotelreservation.NewSearchServiceImpl(ctx context.Context, geoService hotelreservation.GeoService, rateService hotelreservation.RateService) (hotelreservation.SearchService, error)
  - hotelreservation.NewUserServiceImpl(ctx context.Context, userDB NoSQLDatabase)
    (hotelreservation.UserService, error)
  - hotelreservation.Point.Id() string
  - hotelreservation.Point.Lat() float64
  - hotelreservation.Point.Lon() float64
  - hotelreservation.Point.remote()
  - hotelreservation.RatePlan.remote()
  - hotelreservation.Reservation.remote()
  - hotelreservation.RoomType.remote()
  - hotelreservation.User.remote()
  - hotelreservation.checkDataFormat(date string) bool
  - hotelreservation.initGeoDB(ctx context.Context, db NoSQLDatabase) error
  - hotelreservation.initProfileDB(ctx context.Context, db NoSQLDatabase) error
  - hotelreservation.initRateDB(ctx context.Context, db NoSQLDatabase) error
  - hotelreservation.initRecommendationDB(ctx context.Context, db NoSQLDatabase) error
  - hotelreservation.initReservationDB(ctx context.Context, db NoSQLDatabase) error
  - hotelreservation.initUserDB(ctx context.Context, userDB NoSQLDatabase) error
