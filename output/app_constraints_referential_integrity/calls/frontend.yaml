(*FrontendImpl).CreateAccount(ctx context.Context, reqID string, accountID string, username string):
- SERVICE CALL @ CreateAccount >> (*app_constraints_referential_integrity.AccountServiceImpl).CreateAccount(ctx context.Context, reqID string, accountID string, username string) (app_constraints_referential_integrity.Account struct{ReqID string, AccountID string, Username string, Timestamp int64}, error)

(*FrontendImpl).DeleteAccount(ctx context.Context, accountID string):
- SERVICE CALL @ DeleteAccount >> (*app_constraints_referential_integrity.AccountServiceImpl).DeleteAccount(ctx context.Context, accountID string) (bool, error)

(*FrontendImpl).DeleteUser(ctx context.Context, username string):
- SERVICE CALL @ DeleteUser >> (*app_constraints_referential_integrity.UserServiceImpl).DeleteUser(ctx context.Context, username string) (bool, error)

(*FrontendImpl).ReadAccount(ctx context.Context, accountID string):
- SERVICE CALL @ GetAccount >> (*app_constraints_referential_integrity.AccountServiceImpl).GetAccount(ctx context.Context, accountID string) (app_constraints_referential_integrity.Account struct{ReqID string, AccountID string, Username string, Timestamp int64}, error)

(*FrontendImpl).ReadAccountUser(ctx context.Context, accountID string):
- SERVICE CALL @ ReadAccountUser >> (*app_constraints_referential_integrity.AccountServiceImpl).ReadAccountUser(ctx context.Context, accountID string) (app_constraints_referential_integrity.User struct{ReqID string, UserID string, Username string, Timestamp int64}, error)

.NewAccountServiceImpl(ctx context.Context, userService app_constraints_referential_integrity.UserService, accountsDB NoSQLDatabase)
:
 []

.NewFrontendImpl(ctx context.Context, accountService app_constraints_referential_integrity.AccountService, userService app_constraints_referential_integrity.UserService)
:
 []

.NewUserServiceImpl(ctx context.Context, usersDB NoSQLDatabase): []
