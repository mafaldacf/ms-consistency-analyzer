(*AccountServiceImpl).CreateAccount(ctx context.Context, reqID string, accountID string, username string):
- SERVICE CALL @ CreateUser >> (*app_constraints_referential_integrity.UserServiceImpl).CreateUser(ctx context.Context, reqID string, username string) (app_constraints_referential_integrity.User struct{ReqID string, UserID string, Username string, Timestamp int64}, error)
- DATASTORE CALL @ accounts_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}

(*AccountServiceImpl).DeleteAccount(ctx context.Context, accountID string):
- DATASTORE CALL @ accounts_db >> NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*AccountServiceImpl).GetAccount(ctx context.Context, accountID string):
- DATASTORE CALL @ accounts_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*AccountServiceImpl).ReadAccountUser(ctx context.Context, accountID string):
- DATASTORE CALL @ accounts_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
- SERVICE CALL @ GetUser >> (*app_constraints_referential_integrity.UserServiceImpl).GetUser(ctx context.Context, username string) (app_constraints_referential_integrity.User struct{ReqID string, UserID string, Username string, Timestamp int64}, error)

.NewAccountServiceImpl(ctx context.Context, userService app_constraints_referential_integrity.UserService, accountsDB NoSQLDatabase)
:
 []

.NewFrontendImpl(ctx context.Context, accountService app_constraints_referential_integrity.AccountService, userService app_constraints_referential_integrity.UserService)
:
 []

.NewUserServiceImpl(ctx context.Context, usersDB NoSQLDatabase): []
