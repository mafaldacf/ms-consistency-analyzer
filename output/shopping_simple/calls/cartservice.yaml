(*CartServiceImpl).AddProductToCart(ctx context.Context, cartID string, productID string):
- SERVICE CALL @ GetProduct >> (*shopping_simple.ProductServiceImpl).GetProduct(ctx context.Context, productID string) (shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
- DATASTORE CALL @ cart_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
- DATASTORE CALL @ cart_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}

(*CartServiceImpl).CreateCart(ctx context.Context, cartID string):
- DATASTORE CALL @ cart_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}

(*CartServiceImpl).GetCart(ctx context.Context, cartID string):
- DATASTORE CALL @ cart_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*CartServiceImpl).Run(ctx context.Context):
- INTERNAL CALL >> (*shopping_simple.CartServiceImpl).workerThread(ctx context.Context)
  error

(*CartServiceImpl).removeProduct(ctx context.Context, message shopping_simple.ProductQueueMessage struct{ProductID string, Remove bool})
:
	- DATASTORE CALL @ cart_db >> NoSQLDatabase.NoSQLCollection.UpdateMany(ctx context.Context, filter bson.D, update bson.D) (int, interface{})

(*CartServiceImpl).workerThread(ctx context.Context):
- DATASTORE CALL @ product_queue >> Queue.Pop(ctx context.Context, item interface{})
  (err, interface{})
- INTERNAL CALL >> (*shopping_simple.CartServiceImpl).removeProduct(ctx context.Context, message shopping_simple.ProductQueueMessage struct{ProductID string, Remove bool})
  error

.NewCartServiceImpl(ctx context.Context, product_service shopping_simple.ProductService, cart_db NoSQLDatabase, product_queue Queue)
:
 []

.NewFrontendImpl(ctx context.Context, product_service shopping_simple.ProductService, cart_service shopping_simple.CartService): []

.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase, product_queue Queue): []
