"":
- package: ""
- package path: github.com/blueprint-uservices/blueprint/examples/shopping_simple/workflow/...
- module: ""
- files: []
- imports (extracted from package): []
- imports (extracted from source files): []
- imported types: []
- imported constants: []
- imported variables: []
- declared types: []
- declared variables: []
- declared constants: []
- service types: []
- datastore types: []
- parsed methods: []

shopping_simple:
- package: shopping_simple
- package path: github.com/blueprint-uservices/blueprint/examples/shopping_simple/workflow/shopping_simple
- module: github.com/blueprint-uservices/blueprint/examples/shopping_simple/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_simple/workflow/shopping_simple/CartService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_simple/workflow/shopping_simple/Frontend.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_simple/workflow/shopping_simple/ProductService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/shopping_simple/workflow/shopping_simple/models.go
- imports (extracted from package):
  - context
  - fmt
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - go.mongodb.org/mongo-driver/bson
  - sync
- imports (extracted from source files):
  - (backend) github.com/blueprint-uservices/blueprint/runtime/core/backend
  - (bson) go.mongodb.org/mongo-driver/bson
  - context
  - fmt
  - sync
- imported types:
  - .error
  - NoSQLCollection interface{NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.NoSQLCollection.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.UpdateMany(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.ReplaceOne(ctx context.Context, filter bson.D, interface{}), NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.NoSQLCollection.InsertMany(ctx context.Context, key []interface{}), NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.NoSQLCollection.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.NoSQLCursor.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.NoSQLCursor.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
  - atomic.Uint64
  - atomic.align64
  - atomic.noCopy
  - context.Context
  - primitive.D
  - primitive.E
  - sync.WaitGroup
  - sync.noCopy
- imported constants: []
- imported variables: []
- declared types:
  - shopping_simple.Cart struct{CartID string, LastProductID string, TotalQuantity int, Products []string}
  - shopping_simple.CartProduct struct{CartID string, ProductID string, Quantity int, PricePerUnit int}
  - shopping_simple.CartService
  - shopping_simple.CartServiceImpl struct{product_service shopping_simple.ProductService, cart_db NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, product_queue Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})},
    num_workers int}
  - shopping_simple.Frontend
  - shopping_simple.FrontendImpl struct{product_service shopping_simple.ProductService, cart_service shopping_simple.CartService}
  - shopping_simple.Media struct{Video []byte}
  - shopping_simple.Post struct{User shopping_simple.User struct{ID int64, Name string},
    Media shopping_simple.Media struct{Video []byte}, Text string}
  - shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}
  - shopping_simple.ProductQueueMessage struct{ProductID string, Remove bool}
  - shopping_simple.ProductService
  - shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, product_queue Queue
    interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}, num_workers int}
  - shopping_simple.User struct{ID int64, Name string}
- declared variables: []
- declared constants:
  - DECLARED_CONSTANT "THIS IS A CONSTANT!" untyped string
- service types:
  - shopping_simple.CartService
  - shopping_simple.Frontend
  - shopping_simple.ProductService
- datastore types:
  - NoSQLCollection interface{NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.NoSQLCollection.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.UpdateMany(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.ReplaceOne(ctx context.Context, filter bson.D, interface{}), NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.NoSQLCollection.InsertMany(ctx context.Context, key []interface{}), NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.NoSQLCollection.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.NoSQLCursor.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.NoSQLCursor.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
- parsed methods:
  - (*shopping_simple.CartServiceImpl).AddProductToCart(ctx context.Context, cartID string, productID string) (shopping_simple.CartProduct struct{CartID string, ProductID string, Quantity int, PricePerUnit int}, error)
  - (*shopping_simple.CartServiceImpl).CreateCart(ctx context.Context, cartID string)
    (shopping_simple.Cart struct{CartID string, LastProductID string, TotalQuantity int, Products []string}, error)
  - (*shopping_simple.CartServiceImpl).GetCart(ctx context.Context, cartID string)
    (shopping_simple.Cart struct{CartID string, LastProductID string, TotalQuantity int, Products []string}, error)
  - (*shopping_simple.CartServiceImpl).Run(ctx context.Context) error
  - (*shopping_simple.CartServiceImpl).removeProduct(ctx context.Context, message shopping_simple.ProductQueueMessage struct{ProductID string, Remove bool}) error
  - (*shopping_simple.CartServiceImpl).workerThread(ctx context.Context) error
  - (*shopping_simple.FrontendImpl).AddProductToCart(ctx context.Context, cartID string, productID string) (shopping_simple.CartProduct struct{CartID string, ProductID string, Quantity int, PricePerUnit int}, error)
  - (*shopping_simple.FrontendImpl).CreateCart(ctx context.Context, cartID string)
    (shopping_simple.Cart struct{CartID string, LastProductID string, TotalQuantity int, Products []string}, error)
  - (*shopping_simple.FrontendImpl).CreateProduct(ctx context.Context, productID string, description string, pricePerUnit int, category string) (shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - (*shopping_simple.FrontendImpl).DeleteProduct(ctx context.Context, productID string)
    (bool, error)
  - (*shopping_simple.FrontendImpl).GetAllProducts(ctx context.Context) ([]shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - (*shopping_simple.FrontendImpl).GetCart(ctx context.Context, cartID string) (shopping_simple.Cart struct{CartID string, LastProductID string, TotalQuantity int, Products []string}, error)
  - (*shopping_simple.FrontendImpl).GetProduct(ctx context.Context, productID string)
    (shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - (*shopping_simple.ProductServiceImpl).CreateProduct(ctx context.Context, productID string, description string, pricePerUnit int, category string) (shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - (*shopping_simple.ProductServiceImpl).DeleteProduct(ctx context.Context, productID string) (bool, error)
  - (*shopping_simple.ProductServiceImpl).GetAllProducts(ctx context.Context) ([]shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - (*shopping_simple.ProductServiceImpl).GetProduct(ctx context.Context, productID string) (shopping_simple.Product struct{ProductID string, Description string, PricePerUnit int, Category string}, error)
  - shopping_simple.NewCartServiceImpl(ctx context.Context, product_service shopping_simple.ProductService, cart_db NoSQLDatabase, product_queue Queue) (shopping_simple.CartService, error)
  - shopping_simple.NewFrontendImpl(ctx context.Context, product_service shopping_simple.ProductService, cart_service shopping_simple.CartService) (shopping_simple.Frontend, error)
  - shopping_simple.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase, product_queue Queue) (shopping_simple.ProductService, error)
