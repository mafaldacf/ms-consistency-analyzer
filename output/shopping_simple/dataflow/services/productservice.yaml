? (*ProductServiceImpl).CreateProduct(ctx context.Context, productID string, description string, pricePerUnit int, category string)
:
 block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int})
  - _1 depth 1 (StructObject UserType) shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int}
  - __2 depth 2 (FieldObject FieldType) product_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) product_db NoSQLDatabase
  - __4 depth 2 (FieldObject FieldType) product_queue Queue
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) product_queue Queue
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ Frontend
  - '0 depth 0 (BasicObject BasicType) productID string --> w-tainted 1x: write(product_db.Product.ProductID)'
  - '_1 depth 1 (Reference BasicType) ref <productID string> @ Frontend --> w-tainted
    1x: write(product_db.Product.ProductID)'
  - '0 depth 0 (BasicObject BasicType) description string --> w-tainted 1x: write(product_db.Product.Description)'
  - '_1 depth 1 (Reference BasicType) ref <description string> @ Frontend --> w-tainted
    1x: write(product_db.Product.Description)'
  - '0 depth 0 (BasicObject BasicType) pricePerUnit int --> w-tainted 1x: write(product_db.Product.PricePerUnit)'
  - '_1 depth 1 (Reference BasicType) ref <pricePerUnit int> @ Frontend --> w-tainted
    1x: write(product_db.Product.PricePerUnit)'
  - '0 depth 0 (BasicObject BasicType) category string --> w-tainted 1x: write(product_db.Product.Category)'
  - '_1 depth 1 (Reference BasicType) ref <category string> @ Frontend --> w-tainted
    1x: write(product_db.Product.Category)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = product_database, collection = product_collection}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (StructObject UserType) product shopping_simple.Product struct{ProductID
    string, Description string, PricePerUnit int, Category string} --> w-tainted 1x:
    write(product_db.Product)'
  - '_1 depth 1 (FieldObject FieldType) Category string --> w-tainted 1x: write(product_db.Product.Category)'
  - '_4 depth 1 (FieldObject FieldType) Description string --> w-tainted 1x: write(product_db.Product.Description)'
  - '_7 depth 1 (FieldObject FieldType) PricePerUnit int --> w-tainted 1x: write(product_db.Product.PricePerUnit)'
  - '_10 depth 1 (FieldObject FieldType) ProductID string --> w-tainted 1x: write(product_db.Product.ProductID)'
  - 0 depth 0 (InterfaceObject UserType) err .error

(*ProductServiceImpl).DeleteProduct(ctx context.Context, productID string):
  block 2 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int})
  - _1 depth 1 (StructObject UserType) shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int}
  - __2 depth 2 (FieldObject FieldType) product_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) product_db NoSQLDatabase
  - __4 depth 2 (FieldObject FieldType) product_queue Queue
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) product_queue Queue
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ Frontend
  - 0 depth 0 (BasicObject BasicType) productID string
  - _1 depth 1 (Reference BasicType) ref <productID string> @ Frontend
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = product_database, collection = product_collection}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "productid" string, Key "productid" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "productid" string
  - ___3 depth 3 (BasicObject BasicType) "productid" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - 0 depth 0 (InterfaceObject UserType) err .error
  - 0 depth 0 (BasicObject BasicType) val bool

(*ProductServiceImpl).GetAllProducts(ctx context.Context):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int})
  - _1 depth 1 (StructObject UserType) shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int}
  - __2 depth 2 (FieldObject FieldType) product_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) product_db NoSQLDatabase
  - __4 depth 2 (FieldObject FieldType) product_queue Queue
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) product_queue Queue
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ Frontend
  - '0 depth 0 (ArrayObject ArrayType) products []shopping_simple.Product struct{ProductID
    string, Description string, PricePerUnit int, Category string} --> r-tainted 1x:
    read(product_db.[]shopping_simple.Product struct{ProductID string, Description
    string, PricePerUnit int, Category string})'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = product_database, collection = product_collection}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) cursor NoSQLCursor {database
    = product_database, collection = product_collection} --> r-tainted 1x: read(product_db.Product)'
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (InterfaceObject UserType) err .error

(*ProductServiceImpl).GetProduct(ctx context.Context, productID string):
  block 8 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int})
  - _1 depth 1 (StructObject UserType) shopping_simple.ProductServiceImpl struct{product_db NoSQLDatabase, product_queue Queue, num_workers int}
  - __2 depth 2 (FieldObject FieldType) product_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) product_db NoSQLDatabase
  - __4 depth 2 (FieldObject FieldType) product_queue Queue
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) product_queue Queue
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ Frontend
  - _2 depth 1 (Reference UserType) ref <ctx context.Context> @ CartService
  - __3 depth 2 (Reference UserType) ref <ctx context.Context> @ Frontend
  - '0 depth 0 (BasicObject BasicType) productID string --> w-tainted 1x: write(cart_db.Cart.Products)
    --> r-tainted 1x: read(product_db.Product.ProductID)'
  - '_1 depth 1 (Reference BasicType) ref <productID string> @ Frontend --> r-tainted
    1x: read(product_db.Product.ProductID)'
  - '_2 depth 1 (Reference BasicType) ref <productID string> @ CartService --> w-tainted
    2x: write(cart_db.Cart.LastProductID, cart_db.Cart.Products) --> r-tainted 1x:
    read(product_db.Product.ProductID)'
  - '__3 depth 2 (Reference BasicType) ref <productID string> @ Frontend --> w-tainted
    1x: write(cart_db.Cart.Products) --> r-tainted 1x: read(product_db.Product.ProductID)'
  - '0 depth 0 (StructObject UserType) product shopping_simple.Product struct{ProductID
    string, Description string, PricePerUnit int, Category string} --> r-tainted 1x:
    read(product_db.Product)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = product_database, collection = product_collection}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) query primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "productid" string, Key "productid" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "productid" string
  - ___3 depth 3 (BasicObject BasicType) "productid" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = product_database, collection = product_collection} --> r-tainted 1x: read(product_db.Product)'
  - 0 depth 0 (InterfaceObject UserType) err .error
  - 0 depth 0 (BasicObject BasicType) exists bool
  - 0 depth 0 (InterfaceObject UserType) err .error

.NewCartServiceImpl(ctx context.Context, product_service shopping_simple.ProductService, cart_db NoSQLDatabase, product_queue Queue)
:
 block 0 (Body):
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (ServiceObject ServiceType) product_service shopping_simple.ProductService
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) cart_db NoSQLDatabase
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) product_queue Queue

.NewFrontendImpl(ctx context.Context, product_service shopping_simple.ProductService, cart_service shopping_simple.CartService):
  block 0 (Body):
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (ServiceObject ServiceType) product_service shopping_simple.ProductService
  - 0 depth 0 (ServiceObject ServiceType) cart_service shopping_simple.CartService

.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase, product_queue Queue):
  block 0 (Body):
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) product_db NoSQLDatabase
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) product_queue Queue
