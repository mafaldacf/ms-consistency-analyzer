(*TrainFoodServiceImpl).Cleanup(ctx context.Context):
- DATASTORE CALL @ trainfood_db >> NoSQLDatabase.NoSQLCollection.DeleteMany(ctx context.Context, filter bson.D) interface{}

(*TrainFoodServiceImpl).CreateTrainFood(ctx context.Context, tf trainfood.TrainFood struct{ID string, TripID string, Foods []food.Food struct{Name string, Price float64}})
:
	- DATASTORE CALL @ trainfood_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
  - DATASTORE CALL @ trainfood_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}
  - DATASTORE CALL @ trainfood_db >> NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})

(*TrainFoodServiceImpl).ListTrainFood(ctx context.Context):
- DATASTORE CALL @ trainfood_db >> NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*TrainFoodServiceImpl).ListTrainFoodByTripID(ctx context.Context, tripid string):
- DATASTORE CALL @ trainfood_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

.NewTrainFoodServiceImpl(ctx context.Context, db NoSQLDatabase): []
