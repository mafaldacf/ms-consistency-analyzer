? (*PriceServiceImpl).CreateNewPriceConfig(ctx context.Context, pc price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64})
:
	- INTERNAL CALL >> (*price.PriceServiceImpl).FindByID(ctx context.Context, id string)
    (price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64}, error)
  - DATASTORE CALL @ price_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}
  - DATASTORE CALL @ price_db >> NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})

(*PriceServiceImpl).DeletePriceConfig(ctx context.Context, id string):
- DATASTORE CALL @ price_db >> NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*PriceServiceImpl).FindByID(ctx context.Context, id string):
- DATASTORE CALL @ price_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*PriceServiceImpl).FindByRouteIDAndTrainType(ctx context.Context, routeID string, trainType string):
- DATASTORE CALL @ price_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*PriceServiceImpl).FindByRouteIDsAndTrainTypes(ctx context.Context, rtsAndTypes []string):
- INTERNAL CALL >> (*price.PriceServiceImpl).FindByRouteIDAndTrainType(ctx context.Context, routeID string, trainType string) (price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64}, error)

(*PriceServiceImpl).GetAllPriceConfig(ctx context.Context):
- DATASTORE CALL @ price_db >> NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*PriceServiceImpl).UpdatePriceConfig(ctx context.Context, pc price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64})
:
	- DATASTORE CALL @ price_db >> NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})

.NewPriceServiceImpl(ctx context.Context, db NoSQLDatabase): []
