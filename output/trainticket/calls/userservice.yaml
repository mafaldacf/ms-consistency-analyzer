(*UserServiceImpl).DeleteUser(ctx context.Context, userID string):
- DATASTORE CALL @ user_db >> NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*UserServiceImpl).FindByUserID(ctx context.Context, userID string):
- DATASTORE CALL @ user_db >> NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*UserServiceImpl).FindByUsername(ctx context.Context, username string):
- DATASTORE CALL @ user_db >> NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*UserServiceImpl).GetAllUsers(ctx context.Context):
- DATASTORE CALL @ user_db >> NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*UserServiceImpl).SaveUser(ctx context.Context, user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string})
:
	- DATASTORE CALL @ user_db >> NoSQLDatabase.InsertOne(ctx context.Context, document interface{}) interface{}

(*UserServiceImpl).UpdateUser(ctx context.Context, user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string})
:
	- DATASTORE CALL @ user_db >> NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})

.NewUserServiceImpl(ctx context.Context, db NoSQLDatabase): []
