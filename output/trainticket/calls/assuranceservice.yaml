(*AssuranceServiceImpl).Create(ctx context.Context, typeindex int64, orderid string):
- INTERNAL CALL >> assurance.getAssuranceType(ctx context.Context, index int64) (assurance.AssuranceType struct{Index int64, Name string, Price float64}, error)
- DATASTORE CALL @ assurance_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}

(*AssuranceServiceImpl).DeleteById(ctx context.Context, id string):
- DATASTORE CALL @ assurance_db >> NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*AssuranceServiceImpl).DeleteByOrderId(ctx context.Context, order_id string):
- DATASTORE CALL @ assurance_db >> NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*AssuranceServiceImpl).FindAssuranceById(ctx context.Context, id string):
- DATASTORE CALL @ assurance_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*AssuranceServiceImpl).FindAssuranceByOrderId(ctx context.Context, order_id string):
- DATASTORE CALL @ assurance_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*AssuranceServiceImpl).GetAllAssuranceTypes(ctx context.Context): []

(*AssuranceServiceImpl).GetAllAssurances(ctx context.Context):
- DATASTORE CALL @ assurance_db >> NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*AssuranceServiceImpl).Modify(ctx context.Context, assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}})
:
	- INTERNAL CALL >> (*assurance.AssuranceServiceImpl).FindAssuranceById(ctx context.Context, id string) (assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}}, error)
  - DATASTORE CALL @ assurance_db >> NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})

.NewAssuranceServiceImpl(ctx context.Context, db NoSQLDatabase): []

.getAssuranceType(ctx context.Context, index int64): []
