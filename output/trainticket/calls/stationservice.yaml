(*StationServiceImpl).CreateStation(ctx context.Context, station station.Station struct{ID string, Name string, StayTime int64}):
- DATASTORE CALL @ station_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
- DATASTORE CALL @ station_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}

(*StationServiceImpl).DeleteStation(ctx context.Context, id string):
- DATASTORE CALL @ station_db >> NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*StationServiceImpl).Exists(ctx context.Context, name string):
- DATASTORE CALL @ station_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*StationServiceImpl).FindByID(ctx context.Context, id string):
- DATASTORE CALL @ station_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*StationServiceImpl).FindByIDs(ctx context.Context, ids []string):
- INTERNAL CALL >> (*station.StationServiceImpl).FindByID(ctx context.Context, id string) (station.Station struct{ID string, Name string, StayTime int64}, error)

(*StationServiceImpl).FindID(ctx context.Context, name string):
- DATASTORE CALL @ station_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*StationServiceImpl).FindIDs(ctx context.Context, names []string):
- INTERNAL CALL >> (*station.StationServiceImpl).FindID(ctx context.Context, name string) (string, error)

(*StationServiceImpl).UpdateStation(ctx context.Context, station station.Station struct{ID string, Name string, StayTime int64}):
- DATASTORE CALL @ station_db >> NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})

.NewStationServiceImpl(ctx context.Context, db NoSQLDatabase): []
