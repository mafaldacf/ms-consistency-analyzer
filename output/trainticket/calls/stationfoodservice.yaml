(*StationFoodServiceImpl).Cleanup(ctx context.Context):
- DATASTORE CALL @ stationfood_db >> NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D) interface{}

(*StationFoodServiceImpl).CreateFoodStore(ctx context.Context, store stationfood.StationFoodStore struct{ID string, StationName string, StoreName string, Telephone string, BusinessTime string, DeliveryFee float64, Foods []food.Food struct{Name string, Price float64}})
:
	- DATASTORE CALL @ stationfood_db >> NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
  - DATASTORE CALL @ stationfood_db >> NoSQLDatabase.InsertOne(ctx context.Context, document interface{}) interface{}

(*StationFoodServiceImpl).GetFoodStoreByID(ctx context.Context, id string):
- DATASTORE CALL @ stationfood_db >> NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*StationFoodServiceImpl).GetFoodStoresByStationNames(ctx context.Context, stations []string):
- DATASTORE CALL @ stationfood_db >> NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*StationFoodServiceImpl).ListFoodStores(ctx context.Context):
- DATASTORE CALL @ stationfood_db >> NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*StationFoodServiceImpl).ListFoodStoresByStationName(ctx context.Context, station string):
- DATASTORE CALL @ stationfood_db >> NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

.NewStationFoodServiceImpl(ctx context.Context, db NoSQLDatabase): []
