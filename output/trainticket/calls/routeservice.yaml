? (*RouteServiceImpl).CreateAndModify(ctx context.Context, info route.RouteInfo struct{ID string, StartStation string, EndStation string, StationList string, DistanceList string})
:
	- DATASTORE CALL @ route_db >> NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})
  - DATASTORE CALL @ route_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}
  - DATASTORE CALL @ route_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*RouteServiceImpl).DeleteRoute(ctx context.Context, id string):
- DATASTORE CALL @ route_db >> NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*RouteServiceImpl).GetAllRoutes(ctx context.Context):
- DATASTORE CALL @ route_db >> NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*RouteServiceImpl).GetRouteById(ctx context.Context, id string):
- DATASTORE CALL @ route_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

(*RouteServiceImpl).GetRouteByIds(ctx context.Context, ids []string):
- INTERNAL CALL >> (*route.RouteServiceImpl).GetRouteById(ctx context.Context, id string) (route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string}, error)

(*RouteServiceImpl).GetRouteByStartAndEnd(ctx context.Context, start string, end string):
- DATASTORE CALL @ route_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})

.NewRouteServiceImpl(ctx context.Context, db NoSQLDatabase): []
