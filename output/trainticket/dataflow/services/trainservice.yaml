(*TrainServiceImpl).AllTrains(ctx context.Context):
  block 8 (IfDone):
  - ' depth 0 (PointerObject PointerType) ts (*train.TrainServiceImpl struct{db NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) train.TrainServiceImpl struct{db NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (ArrayObject ArrayType) trains []train.TrainType struct{ID string, Name
    string, EconomyClass int64, ComfortClass int64, AvgSpeed int64} --> r-tainted
    1x: read(train_db.[]train.TrainType struct{ID string, Name string, EconomyClass
    int64, ComfortClass int64, AvgSpeed int64})'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = train, collection = train}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = train, collection = train} --> r-tainted 1x: read(train_db.TrainType)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*TrainServiceImpl).Create(ctx context.Context, tt train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64})
:
 block 14 (IfDone):
  - ' depth 0 (PointerObject PointerType) ts (*train.TrainServiceImpl struct{db NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) train.TrainServiceImpl struct{db NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (StructObject UserType) tt train.TrainType struct{ID string, Name string,
    EconomyClass int64, ComfortClass int64, AvgSpeed int64} --> w-tainted 1x: write(train_db.TrainType)'
  - '_ depth 1 (FieldObject FieldType) Name string --> w-tainted 1x: write(train_db.TrainType.Name)'
  - '__ depth 2 (BasicObject BasicType) Name string --> w-tainted 1x: write(train_db.TrainType.Name)
    --> r-tainted 1x: read(train_db._.name)'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = train, collection = train}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "name" string, string}
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = train, collection = train} --> r-tainted 1x: read(train_db._)'
  - '_ depth 1 (StructObject UserType) saved_tt train.TrainType struct{ID string,
    Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64} --> r-tainted
    1x: read(train_db.TrainType)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (BasicObject BasicType) exists bool'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*TrainServiceImpl).Delete(ctx context.Context, id string):
  block 5 (IfDone):
  - ' depth 0 (PointerObject PointerType) ts (*train.TrainServiceImpl struct{db NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) train.TrainServiceImpl struct{db NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (BasicObject BasicType) id string'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = train, collection = train}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*TrainServiceImpl).Retrieve(ctx context.Context, id string):
  block 11 (IfDone):
  - ' depth 0 (PointerObject PointerType) ts (*train.TrainServiceImpl struct{db NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) train.TrainServiceImpl struct{db NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (BasicObject BasicType) id string --> r-tainted 1x: read(train_db.TrainType.ID)'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = train, collection = train}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "id" string, string}
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = train, collection = train} --> r-tainted 1x: read(train_db.TrainType)'
  - '_ depth 1 (StructObject UserType) tt train.TrainType struct{ID string, Name string,
    EconomyClass int64, ComfortClass int64, AvgSpeed int64} --> r-tainted 1x: read(train_db.TrainType)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (BasicObject BasicType) exists bool'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*TrainServiceImpl).RetrieveByName(ctx context.Context, name string):
  block 11 (IfDone):
  - ' depth 0 (PointerObject PointerType) ts (*train.TrainServiceImpl struct{db NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) train.TrainServiceImpl struct{db NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (BasicObject BasicType) name string --> r-tainted 1x: read(train_db.TrainType.Name)'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = train, collection = train}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "name" string, string}
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = train, collection = train} --> r-tainted 1x: read(train_db.TrainType)'
  - '_ depth 1 (StructObject UserType) tt train.TrainType struct{ID string, Name string,
    EconomyClass int64, ComfortClass int64, AvgSpeed int64} --> r-tainted 1x: read(train_db.TrainType)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (BasicObject BasicType) exists bool'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*TrainServiceImpl).RetrieveByNames(ctx context.Context, names []string):
  block 0 (Body):
  - ' depth 0 (PointerObject PointerType) ts (*train.TrainServiceImpl struct{db NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) train.TrainServiceImpl struct{db NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (ArrayObject ArrayType) names []string'
  - ' depth 0 (ArrayObject ArrayType) trainTypes []train.TrainType struct{ID string,
    Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64}'

(*TrainServiceImpl).Update(ctx context.Context, ttype train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64})
:
 block 2 (IfDone):
  - ' depth 0 (PointerObject PointerType) ts (*train.TrainServiceImpl struct{db NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) train.TrainServiceImpl struct{db NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (StructObject UserType) ttype train.TrainType struct{ID string, Name
    string, EconomyClass int64, ComfortClass int64, AvgSpeed int64}'
  - _ depth 1 (FieldObject FieldType) ID string
  - __ depth 2 (BasicObject BasicType) ID string
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = train, collection = train}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "id" string, string}

.NewTrainServiceImpl(ctx context.Context, db NoSQLDatabase):
  block 0 (Body):
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase'
