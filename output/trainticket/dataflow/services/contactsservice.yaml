? (*ContactsServiceImpl).CreateContacts(ctx context.Context, contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string})
:
 block 11 (IfDone):
  - ' depth 0 (PointerObject PointerType) c (*contacts.ContactsServiceImpl struct{contactsDB
    NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) contacts.ContactsServiceImpl struct{contactsDB NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) contactsDB NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (StructObject UserType) contact contacts.Contact struct{ID string, AccountID
    string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string}
    --> w-tainted 1x: write(contacts_db.Contact)'
  - '_ depth 1 (FieldObject FieldType) AccountID string --> w-tainted 1x: write(contacts_db.Contact.AccountID)'
  - '__ depth 2 (BasicObject BasicType) AccountID string --> w-tainted 1x: write(contacts_db.Contact.AccountID)
    --> r-tainted 1x: read(contacts_db._.accountid)'
  - '_ depth 1 (FieldObject FieldType) DocumentNumber string --> w-tainted 1x: write(contacts_db.Contact.DocumentNumber)'
  - '__ depth 2 (BasicObject BasicType) DocumentNumber string --> w-tainted 1x: write(contacts_db.Contact.DocumentNumber)
    --> r-tainted 1x: read(contacts_db._.documentnumber)'
  - '_ depth 1 (FieldObject FieldType) DocumentType int --> w-tainted 1x: write(contacts_db.Contact.DocumentType)'
  - '__ depth 2 (BasicObject BasicType) DocumentType int --> w-tainted 1x: write(contacts_db.Contact.DocumentType)
    --> r-tainted 1x: read(contacts_db._.documenttype)'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = contacts, collection = contacts}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "accountid" string, string}
  - _ depth 1 (StructObject StructType) struct{ "documentnumber" string, string}
  - _ depth 1 (StructObject StructType) struct{ "documenttype" string, int}
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = contacts, collection = contacts} --> r-tainted 1x: read(contacts_db._)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (StructObject UserType) existing contacts.Contact struct{ID string,
    AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber
    string} --> r-tainted 1x: read(contacts_db.Contact)'
  - ' depth 0 (BasicObject BasicType) exists bool'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*ContactsServiceImpl).Delete(ctx context.Context, contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string})
:
 block 2 (IfDone):
  - ' depth 0 (PointerObject PointerType) c (*contacts.ContactsServiceImpl struct{contactsDB
    NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) contacts.ContactsServiceImpl struct{contactsDB NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) contactsDB NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (StructObject UserType) contact contacts.Contact struct{ID string, AccountID
    string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string}'
  - _ depth 1 (FieldObject FieldType) ID string
  - __ depth 2 (BasicObject BasicType) ID string
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = contacts, collection = contacts}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "id" string, string}

(*ContactsServiceImpl).FindContactsByAccountId(ctx context.Context, id string):
  block 8 (IfDone):
  - ' depth 0 (PointerObject PointerType) c (*contacts.ContactsServiceImpl struct{contactsDB
    NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) contacts.ContactsServiceImpl struct{contactsDB NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) contactsDB NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (BasicObject BasicType) id string --> r-tainted 1x: read(contacts_db._.accountid)'
  - ' depth 0 (ArrayObject ArrayType) account_contacts []contacts.Contact struct{ID
    string, AccountID string, Name string, DocumentType int, DocumentNumber string,
    PhoneNumber string} --> r-tainted 1x: read(contacts_db.[]contacts.Contact struct{ID
    string, AccountID string, Name string, DocumentType int, DocumentNumber string,
    PhoneNumber string})'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = contacts, collection = contacts}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "accountid" string, string}
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = contacts, collection = contacts} --> r-tainted 1x: read(contacts_db._)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*ContactsServiceImpl).FindContactsById(ctx context.Context, id string):
  block 11 (IfDone):
  - ' depth 0 (PointerObject PointerType) c (*contacts.ContactsServiceImpl struct{contactsDB
    NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) contacts.ContactsServiceImpl struct{contactsDB NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) contactsDB NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (BasicObject BasicType) id string --> r-tainted 1x: read(contacts_db._.id)'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = contacts, collection = contacts}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "id" string, string}
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = contacts, collection = contacts} --> r-tainted 1x: read(contacts_db._)'
  - '_ depth 1 (StructObject UserType) contact contacts.Contact struct{ID string,
    AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber
    string} --> r-tainted 1x: read(contacts_db.Contact)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (BasicObject BasicType) exists bool'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*ContactsServiceImpl).GetAllContacts(ctx context.Context):
  block 8 (IfDone):
  - ' depth 0 (PointerObject PointerType) c (*contacts.ContactsServiceImpl struct{contactsDB
    NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) contacts.ContactsServiceImpl struct{contactsDB NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) contactsDB NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (ArrayObject ArrayType) all_contacts []contacts.Contact struct{ID string,
    AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber
    string} --> r-tainted 1x: read(contacts_db.[]contacts.Contact struct{ID string,
    AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber
    string})'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = contacts, collection = contacts}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) res NoSQLCursor {database
    = contacts, collection = contacts} --> r-tainted 1x: read(contacts_db.Contact)'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (InterfaceObject UserType) err .error'

(*ContactsServiceImpl).Modify(ctx context.Context, contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string})
:
 block 2 (IfDone):
  - ' depth 0 (PointerObject PointerType) c (*contacts.ContactsServiceImpl struct{contactsDB
    NoSQLDatabase})'
  - _ depth 1 (StructObject UserType) contacts.ContactsServiceImpl struct{contactsDB NoSQLDatabase}
  - __ depth 2 (FieldObject FieldType) contactsDB NoSQLDatabase
  - ___ depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (StructObject UserType) contact contacts.Contact struct{ID string, AccountID
    string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string}'
  - _ depth 1 (FieldObject FieldType) ID string
  - __ depth 2 (BasicObject BasicType) ID string
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) coll NoSQLCollection {database
    = contacts, collection = contacts}'
  - ' depth 0 (InterfaceObject UserType) err .error'
  - ' depth 0 (SliceObject UserType) query primitive.D'
  - _ depth 1 (StructObject StructType) struct{ "id" string, string}

.NewContactsServiceImpl(ctx context.Context, db NoSQLDatabase):
  block 0 (Body):
  - ' depth 0 (InterfaceObject UserType) ctx context.Context'
  - ' depth 0 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase'
