? (*catalogueImpl).AddSock(ctx context.Context, sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string})
:
	- NoSQLDatabase.InsertOne(ctx context.Context, document interface{}) interface{}

(*catalogueImpl).AddTags(ctx context.Context, tags []string):
- NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}) (err, interface{})

(*catalogueImpl).Count(ctx context.Context, tags []string):
- NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = shipping_service, collection = shipments}, interface{})

(*catalogueImpl).DeleteSock(ctx context.Context, id string):
- NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D) interface{}

(*catalogueImpl).Get(ctx context.Context, id string):
- NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = shipping_service, collection = shipments}, interface{})

(*catalogueImpl).List(ctx context.Context, tags []string, order string, pageNum int, pageSize int):
- NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = shipping_service, collection = shipments}, interface{})

(*catalogueImpl).Tags(ctx context.Context):
- NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = shipping_service, collection = shipments}, interface{})

.NewCatalogueService(ctx context.Context, catalogue_db NoSQLDatabase): []
