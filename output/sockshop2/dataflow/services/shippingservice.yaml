(*shippingImpl).GetShipment(ctx context.Context, id string):
  block 2 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*shipping.shippingImpl struct{q Queue, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) shipping.shippingImpl struct{q Queue, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - __4 depth 2 (FieldObject FieldType) q Queue
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) queue Queue
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (BasicObject BasicType) id string
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = shipping_service, collection = shipments}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) cursor NoSQLCursor {database = shipping_service, collection = shipments}
  - _1 depth 1 (StructObject UserType) shipment shipping.Shipment struct{ID string, Name string, Status string}
  - 0 depth 0 (InterfaceObject UserType) err .error

(*shippingImpl).PostShipping(ctx context.Context, shipment shipping.Shipment struct{ID string, Name string, Status string}):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) service (*shipping.shippingImpl struct{q Queue, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) shipping.shippingImpl struct{q Queue, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - __4 depth 2 (FieldObject FieldType) q Queue
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) queue Queue
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ OrderService
  - __2 depth 2 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (StructObject UserType) shipment shipping.Shipment struct{ID string,
    Name string, Status string} --> w-tainted 3x: write(shipqueue.Shipment, shipdb.Shipment,
    order_db.Order.Shipment) --> r-tainted 1x: read(shipqueue.Shipment)'
  - '_1 depth 1 (Reference UserType) ref <shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string}> @ OrderService --> w-tainted
    3x: write(shipqueue.Shipment, shipdb.Shipment, order_db.Order.Shipment) --> r-tainted
    1x: read(shipqueue.Shipment)'
  - '__2 depth 2 (FieldObject FieldType) ID string --> w-tainted 4x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID, order_db.Order.ID, order_db.Order.Shipment.ID) --> r-tainted
    1x: read(shipqueue.Shipment.ID)'
  - '___3 depth 3 (BasicObject BasicType) string --> w-tainted 3x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID, order_db.Order.ID) --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - '__4 depth 2 (FieldObject FieldType) Name string --> w-tainted 3x: write(shipqueue.Shipment.Name,
    shipdb.Shipment.Name, order_db.Order.Shipment) --> r-tainted 1x: read(shipqueue.Shipment.Name)'
  - '___5 depth 3 (BasicObject BasicType) customerID string --> w-tainted 4x: write(shipqueue.Shipment.Name,
    shipdb.Shipment.Name, order_db.Order.CustomerID, order_db.Order.Shipment) -->
    r-tainted 2x: read(shipqueue.Shipment.Name, user_db._.userid)'
  - '____6 depth 4 (Reference BasicType) ref <userID string> @ FrontendService -->
    w-tainted 3x: write(shipqueue.Shipment.Name, shipdb.Shipment.Name, order_db.Order.CustomerID)
    --> r-tainted 2x: read(user_db._.userid, shipqueue.Shipment.Name)'
  - '__7 depth 2 (FieldObject FieldType) Status "awaiting shipment" string --> w-tainted
    3x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status, order_db.Order.Shipment)
    --> r-tainted 1x: read(shipqueue.Shipment.Status)'
  - '___8 depth 3 (BasicObject BasicType) "awaiting shipment" string --> w-tainted
    3x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status, order_db.Order.Shipment)
    --> r-tainted 1x: read(shipqueue.Shipment.Status)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = shipping_service, collection = shipments}
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*shippingImpl).UpdateStatus(ctx context.Context, id string, status string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*shipping.shippingImpl struct{q Queue, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) shipping.shippingImpl struct{q Queue, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - __4 depth 2 (FieldObject FieldType) q Queue
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) queue Queue
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ QueueMaster
  - '0 depth 0 (BasicObject BasicType) id string --> w-tainted 2x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID) --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - '_1 depth 1 (Reference BasicType) ref <ID string> @ QueueMaster --> w-tainted
    2x: write(shipqueue.Shipment.ID, shipdb.Shipment.ID) --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - '__2 depth 2 (Reference FieldType) ref <ID string> @ OrderService --> w-tainted
    4x: write(shipqueue.Shipment.ID, shipdb.Shipment.ID, order_db.Order.ID, order_db.Order.Shipment.ID)
    --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - '___3 depth 3 (BasicObject BasicType) string --> w-tainted 3x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID, order_db.Order.ID) --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - 0 depth 0 (BasicObject BasicType) status string
  - _1 depth 1 (Reference BasicType) ref <"shipped" string> @ QueueMaster
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = shipping_service, collection = shipments}
  - 0 depth 0 (InterfaceObject UserType) _ .error

.NewShippingService(ctx context.Context, queue Queue, db NoSQLDatabase):
  block 0 (Body):
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) queue Queue
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
