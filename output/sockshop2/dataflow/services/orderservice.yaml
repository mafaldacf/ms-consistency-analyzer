(*orderImpl).GetOrder(ctx context.Context, orderID string):
  block 2 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) carts cart.CartService
  - ___3 depth 3 (ServiceObject ServiceType) cartService cart.CartService
  - __4 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) orderDB NoSQLDatabase
  - __6 depth 2 (FieldObject FieldType) payments payment.PaymentService
  - ___7 depth 3 (ServiceObject ServiceType) payments payment.PaymentService
  - __8 depth 2 (FieldObject FieldType) shipping shipping.ShippingService
  - ___9 depth 3 (ServiceObject ServiceType) shipping shipping.ShippingService
  - __10 depth 2 (FieldObject FieldType) users user.UserService
  - ___11 depth 3 (ServiceObject ServiceType) userService user.UserService
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) orderID string --> r-tainted 1x: read(order_db._.id)'
  - '_1 depth 1 (Reference BasicType) ref <orderID string> @ FrontendService --> r-tainted
    1x: read(order_db._.id)'
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{ string, "id" string, string}
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = order_service, collection = orders}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) cursor NoSQLCursor {database
    = order_service, collection = orders} --> r-tainted 1x: read(order_db._)'
  - '_1 depth 1 (StructObject UserType) order order.Order struct{ID string, CustomerID
    string, Customer user.User struct{FirstName string, LastName string, Email string,
    Username string, Password string, Addresses user.Address struct{Street string,
    Number string, Country string, City string, PostCode string, ID string}, Cards
    user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID
    string, Salt string}, Address user.Address struct{Street string, Number string,
    Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum
    string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string,
    Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string}, Date string, Total float32} -->
    r-tainted 1x: read(order_db.Order)'
  - 0 depth 0 (InterfaceObject UserType) err .error

(*orderImpl).GetOrders(ctx context.Context, customerID string):
  block 5 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) carts cart.CartService
  - ___3 depth 3 (ServiceObject ServiceType) cartService cart.CartService
  - __4 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) orderDB NoSQLDatabase
  - __6 depth 2 (FieldObject FieldType) payments payment.PaymentService
  - ___7 depth 3 (ServiceObject ServiceType) payments payment.PaymentService
  - __8 depth 2 (FieldObject FieldType) shipping shipping.ShippingService
  - ___9 depth 3 (ServiceObject ServiceType) shipping shipping.ShippingService
  - __10 depth 2 (FieldObject FieldType) users user.UserService
  - ___11 depth 3 (ServiceObject ServiceType) userService user.UserService
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) customerID string --> r-tainted 1x: read(order_db._.customerid)'
  - '_1 depth 1 (Reference BasicType) ref <userID string> @ FrontendService --> r-tainted
    1x: read(order_db._.customerid)'
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{ string, "customerid" string, string}
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = order_service, collection = orders}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) cursor NoSQLCursor {database
    = order_service, collection = orders} --> r-tainted 1x: read(order_db._)'
  - '_1 depth 1 (ArrayObject ArrayType) orders []order.Order struct{ID string, CustomerID
    string, Customer user.User struct{FirstName string, LastName string, Email string,
    Username string, Password string, Addresses user.Address struct{Street string,
    Number string, Country string, City string, PostCode string, ID string}, Cards
    user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID
    string, Salt string}, Address user.Address struct{Street string, Number string,
    Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum
    string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string,
    Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string}, Date string, Total float32} -->
    r-tainted 1x: read(order_db.[]order.Order struct{ID string, CustomerID string,
    Customer user.User struct{FirstName string, LastName string, Email string, Username
    string, Password string, Addresses user.Address struct{Street string, Number string,
    Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum
    string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address
    user.Address struct{Street string, Number string, Country string, City string,
    PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string,
    CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice
    float32}, Shipment shipping.Shipment struct{ID string, Name string, Status "awaiting
    shipment" string}, Date string, Total float32})'
  - 0 depth 0 (InterfaceObject UserType) err .error
  - 0 depth 0 (InterfaceObject UserType) err .error

(*orderImpl).NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string):
  block 5 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) carts cart.CartService
  - ___3 depth 3 (ServiceObject ServiceType) cartService cart.CartService
  - __4 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___5 depth 3 (BlueprintBackendObject BlueprintBackendType) orderDB NoSQLDatabase
  - __6 depth 2 (FieldObject FieldType) payments payment.PaymentService
  - ___7 depth 3 (ServiceObject ServiceType) payments payment.PaymentService
  - __8 depth 2 (FieldObject FieldType) shipping shipping.ShippingService
  - ___9 depth 3 (ServiceObject ServiceType) shipping shipping.ShippingService
  - __10 depth 2 (FieldObject FieldType) users user.UserService
  - ___11 depth 3 (ServiceObject ServiceType) userService user.UserService
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) customerID string --> w-tainted 4x: write(shipqueue.Shipment.Name,
    shipdb.Shipment.Name, order_db.Order.CustomerID, order_db.Order.Shipment) -->
    r-tainted 2x: read(shipqueue.Shipment.Name, user_db._.userid)'
  - '_1 depth 1 (Reference BasicType) ref <userID string> @ FrontendService --> w-tainted
    3x: write(shipqueue.Shipment.Name, shipdb.Shipment.Name, order_db.Order.CustomerID)
    --> r-tainted 2x: read(user_db._.userid, shipqueue.Shipment.Name)'
  - '0 depth 0 (BasicObject BasicType) addressID string --> r-tainted 1x: read(user_db._.addresses)'
  - '_1 depth 1 (Reference BasicType) ref <addressID string> @ FrontendService -->
    r-tainted 1x: read(user_db._.addresses)'
  - '0 depth 0 (BasicObject BasicType) cardID string --> r-tainted 1x: read(user_db._.cards)'
  - '_1 depth 1 (Reference BasicType) ref <cardID string> @ FrontendService --> r-tainted
    1x: read(user_db._.cards)'
  - 0 depth 0 (BasicObject BasicType) cartID string
  - _1 depth 1 (Reference BasicType) ref <cartID string> @ FrontendService
  - 0 depth 0 (StructObject UserType) wg sync.WaitGroup
  - '0 depth 0 (ArrayObject ArrayType) items []cart.Item struct{ID string, Quantity
    int, UnitPrice float32} --> w-tainted 1x: write(order_db.Order.Items)'
  - 0 depth 0 (ArrayObject ArrayType) addresses []user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
  - 0 depth 0 (ArrayObject ArrayType) cards []user.Card struct{LongNum string, Expires string, CCV string, ID string}
  - '0 depth 0 (BasicObject BasicType) amount 10 float32 --> w-tainted 1x: write(order_db.Order.Total)'
  - '0 depth 0 (StructObject UserType) shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string} --> w-tainted 3x: write(shipqueue.Shipment,
    shipdb.Shipment, order_db.Order.Shipment) --> r-tainted 1x: read(shipqueue.Shipment)'
  - '_1 depth 1 (FieldObject FieldType) ID string --> w-tainted 4x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID, order_db.Order.ID, order_db.Order.Shipment.ID) --> r-tainted
    1x: read(shipqueue.Shipment.ID)'
  - '__2 depth 2 (BasicObject BasicType) string --> w-tainted 3x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID, order_db.Order.ID) --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - '_3 depth 1 (FieldObject FieldType) Name string --> w-tainted 3x: write(shipqueue.Shipment.Name,
    shipdb.Shipment.Name, order_db.Order.Shipment) --> r-tainted 1x: read(shipqueue.Shipment.Name)'
  - '_6 depth 1 (FieldObject FieldType) Status "awaiting shipment" string --> w-tainted
    3x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status, order_db.Order.Shipment)
    --> r-tainted 1x: read(shipqueue.Shipment.Status)'
  - '__7 depth 2 (BasicObject BasicType) "awaiting shipment" string --> w-tainted
    3x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status, order_db.Order.Shipment)
    --> r-tainted 1x: read(shipqueue.Shipment.Status)'
  - '0 depth 0 (StructObject UserType) shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string} --> w-tainted 3x: write(shipqueue.Shipment,
    shipdb.Shipment, order_db.Order.Shipment) --> r-tainted 1x: read(shipqueue.Shipment)'
  - '_1 depth 1 (Reference UserType) ref <shipment shipping.Shipment struct{ID string,
    Name string, Status string}> @ ShippingService --> w-tainted 3x: write(shipqueue.Shipment,
    shipdb.Shipment, order_db.Order.Shipment) --> r-tainted 1x: read(shipqueue.Shipment)'
  - '__2 depth 2 (Reference UserType) ref <shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string}> @ OrderService --> w-tainted
    3x: write(shipqueue.Shipment, shipdb.Shipment, order_db.Order.Shipment) --> r-tainted
    1x: read(shipqueue.Shipment)'
  - '___3 depth 3 (FieldObject FieldType) ID string --> w-tainted 4x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID, order_db.Order.ID, order_db.Order.Shipment.ID) --> r-tainted
    1x: read(shipqueue.Shipment.ID)'
  - '____4 depth 4 (BasicObject BasicType) string --> w-tainted 3x: write(shipqueue.Shipment.ID,
    shipdb.Shipment.ID, order_db.Order.ID) --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - '___5 depth 3 (FieldObject FieldType) Name string --> w-tainted 3x: write(shipqueue.Shipment.Name,
    shipdb.Shipment.Name, order_db.Order.Shipment) --> r-tainted 1x: read(shipqueue.Shipment.Name)'
  - '____6 depth 4 (BasicObject BasicType) customerID string --> w-tainted 4x: write(shipqueue.Shipment.Name,
    shipdb.Shipment.Name, order_db.Order.CustomerID, order_db.Order.Shipment) -->
    r-tainted 2x: read(shipqueue.Shipment.Name, user_db._.userid)'
  - '___8 depth 3 (FieldObject FieldType) Status "awaiting shipment" string --> w-tainted
    3x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status, order_db.Order.Shipment)
    --> r-tainted 1x: read(shipqueue.Shipment.Status)'
  - '____9 depth 4 (BasicObject BasicType) "awaiting shipment" string --> w-tainted
    3x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status, order_db.Order.Shipment)
    --> r-tainted 1x: read(shipqueue.Shipment.Status)'
  - '_10 depth 1 (Reference UserType) ref <shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string}> @ OrderService --> w-tainted
    3x: write(shipqueue.Shipment, shipdb.Shipment, order_db.Order.Shipment) --> r-tainted
    1x: read(shipqueue.Shipment)'
  - '_18 depth 1 (FieldObject FieldType) ID string --> w-tainted 3x: write(order_db.Order.Shipment.ID,
    shipqueue.Shipment.ID, shipdb.Shipment.ID)'
  - '__19 depth 2 (Reference FieldType) ref <ID string> @ OrderService --> w-tainted
    4x: write(shipqueue.Shipment.ID, shipdb.Shipment.ID, order_db.Order.ID, order_db.Order.Shipment.ID)
    --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - '__21 depth 2 (BasicObject BasicType) ID string --> w-tainted 4x: write(order_db.Order.ID,
    order_db.Order.Shipment.ID, shipqueue.Shipment.ID, shipdb.Shipment.ID)'
  - '___22 depth 3 (Reference FieldType) ref <ID string> @ OrderService --> w-tainted
    4x: write(shipqueue.Shipment.ID, shipdb.Shipment.ID, order_db.Order.ID, order_db.Order.Shipment.ID)
    --> r-tainted 1x: read(shipqueue.Shipment.ID)'
  - 0 depth 0 (InterfaceObject UserType) err .error
  - _1 depth 1 (Reference UserType) ref <.error> @ ShippingService
  - '0 depth 0 (StructObject UserType) order order.Order struct{ID string, CustomerID
    string, Customer user.User struct{FirstName string, LastName string, Email string,
    Username string, Password string, Addresses user.Address struct{Street string,
    Number string, Country string, City string, PostCode string, ID string}, Cards
    user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID
    string, Salt string}, Address user.Address struct{Street string, Number string,
    Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum
    string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string,
    Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string}, Date string, Total 10 float32}
    --> w-tainted 1x: write(order_db.Order)'
  - '_1 depth 1 (FieldObject FieldType) Address user.Address struct{Street string,
    Number string, Country string, City string, PostCode string, ID string} --> w-tainted
    1x: write(order_db.Order.Address)'
  - '__2 depth 2 (StructObject UserType) user.Address struct{Street string, Number
    string, Country string, City string, PostCode string, ID string} --> w-tainted
    1x: write(order_db.Order.Address)'
  - '_3 depth 1 (FieldObject FieldType) Card user.Card struct{LongNum string, Expires
    string, CCV string, ID string} --> w-tainted 1x: write(order_db.Order.Card)'
  - '__4 depth 2 (StructObject UserType) user.Card struct{LongNum string, Expires
    string, CCV string, ID string} --> w-tainted 1x: write(order_db.Order.Card)'
  - '_5 depth 1 (FieldObject FieldType) CustomerID string --> w-tainted 1x: write(order_db.Order.CustomerID)'
  - '_8 depth 1 (FieldObject FieldType) Date string --> w-tainted 1x: write(order_db.Order.Date)'
  - '__9 depth 2 (BasicObject BasicType) string --> w-tainted 1x: write(order_db.Order.Date)'
  - '_10 depth 1 (FieldObject FieldType) ID string --> w-tainted 1x: write(order_db.Order.ID)'
  - '_14 depth 1 (FieldObject FieldType) Items []cart.Item struct{ID string, Quantity
    int, UnitPrice float32} --> w-tainted 1x: write(order_db.Order.Items)'
  - '_16 depth 1 (FieldObject FieldType) Shipment shipping.Shipment struct{ID string,
    Name string, Status "awaiting shipment" string} --> w-tainted 1x: write(order_db.Order.Shipment)'
  - '_41 depth 1 (FieldObject FieldType) Total 10 float32 --> w-tainted 1x: write(order_db.Order.Total)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = order_service, collection = orders}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (InterfaceObject UserType) err .error

.NewOrderService(ctx context.Context, userService user.UserService, cartService cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, orderDB NoSQLDatabase)
:
 block 0 (Body):
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (ServiceObject ServiceType) userService user.UserService
  - 0 depth 0 (ServiceObject ServiceType) cartService cart.CartService
  - 0 depth 0 (ServiceObject ServiceType) payments payment.PaymentService
  - 0 depth 0 (ServiceObject ServiceType) shipping shipping.ShippingService
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) orderDB NoSQLDatabase
