(*orderImpl).GetOrder(ctx context.Context, orderID string):
  block 2 (IfDone):
  - (inline) (ServiceVariable ServiceType) userService user.UserService
  - (inline) (FieldVariable FieldType) users user.UserService
  - (inline) (ServiceVariable ServiceType) shipping shipping.ShippingService
  - (inline) (FieldVariable FieldType) shipping shipping.ShippingService
  - (inline) (ServiceVariable ServiceType) payments payment.PaymentService
  - (inline) (FieldVariable FieldType) payments payment.PaymentService
  - (inline) (BlueprintBackendVariable BlueprintBackendType) orderDB NoSQLDatabase
  - (inline) (FieldVariable FieldType) db NoSQLDatabase
  - (inline) (ServiceVariable ServiceType) cartService cart.CartService
  - (inline) (FieldVariable FieldType) carts cart.CartService
  - (inline) (StructVariable UserType) order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase}
  - (PointerVariable PointerType) s (*order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase})
  - (inline) (Reference UserType) ref <ctx context.Context> @ FrontendService
  - (InterfaceVariable UserType) ctx context.Context
  - (inline) (Reference BasicType) ref <orderID string> @ FrontendService
  - (BasicVariable BasicType) orderID string
  - (inline) (FieldVariable FieldType) string
  - (inline) (StructVariable StructType) struct{ "id" string, string}
  - (SliceVariable UserType) filter primitive.D
  - (BlueprintBackendVariable BlueprintBackendType) collection NoSQLCollection {database = order_service, collection = orders}
  - (InterfaceVariable UserType) _ .error
  - (BlueprintBackendVariable BlueprintBackendType) cursor NoSQLCursor {database = order_service, collection = orders}
  - (InterfaceVariable UserType) err .error
  - (StructVariable UserType) order order.Order struct{ID string, CustomerID string, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string}, Date string, Total 10 float32, Total float32}

(*orderImpl).GetOrders(ctx context.Context, customerID string):
  block 5 (IfDone):
  - (inline) (ServiceVariable ServiceType) userService user.UserService
  - (inline) (FieldVariable FieldType) users user.UserService
  - (inline) (ServiceVariable ServiceType) shipping shipping.ShippingService
  - (inline) (FieldVariable FieldType) shipping shipping.ShippingService
  - (inline) (ServiceVariable ServiceType) payments payment.PaymentService
  - (inline) (FieldVariable FieldType) payments payment.PaymentService
  - (inline) (BlueprintBackendVariable BlueprintBackendType) orderDB NoSQLDatabase
  - (inline) (FieldVariable FieldType) db NoSQLDatabase
  - (inline) (ServiceVariable ServiceType) cartService cart.CartService
  - (inline) (FieldVariable FieldType) carts cart.CartService
  - (inline) (StructVariable UserType) order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase}
  - (PointerVariable PointerType) s (*order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase})
  - (inline) (Reference UserType) ref <ctx context.Context> @ FrontendService
  - (InterfaceVariable UserType) ctx context.Context
  - (inline) (Reference BasicType) ref <userID string> @ FrontendService
  - (BasicVariable BasicType) customerID string
  - (inline) (FieldVariable FieldType) string
  - (inline) (StructVariable StructType) struct{ "customerid" string, string}
  - (SliceVariable UserType) filter primitive.D
  - (BlueprintBackendVariable BlueprintBackendType) collection NoSQLCollection {database = order_service, collection = orders}
  - (InterfaceVariable UserType) _ .error
  - (BlueprintBackendVariable BlueprintBackendType) cursor NoSQLCursor {database = order_service, collection = orders}
  - (InterfaceVariable UserType) err .error
  - (ArrayVariable ArrayType) orders []order.Order struct{ID string, CustomerID string, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string}, Date string, Total 10 float32, Total float32}
  - (InterfaceVariable UserType) err .error

(*orderImpl).NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string):
  block 5 (IfDone):
  - (inline) (ServiceVariable ServiceType) userService user.UserService
  - (inline) (FieldVariable FieldType) users user.UserService
  - (inline) (ServiceVariable ServiceType) shipping shipping.ShippingService
  - (inline) (FieldVariable FieldType) shipping shipping.ShippingService
  - (inline) (ServiceVariable ServiceType) payments payment.PaymentService
  - (inline) (FieldVariable FieldType) payments payment.PaymentService
  - (inline) (BlueprintBackendVariable BlueprintBackendType) orderDB NoSQLDatabase
  - (inline) (FieldVariable FieldType) db NoSQLDatabase
  - (inline) (ServiceVariable ServiceType) cartService cart.CartService
  - (inline) (FieldVariable FieldType) carts cart.CartService
  - (inline) (StructVariable UserType) order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase}
  - (PointerVariable PointerType) s (*order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db NoSQLDatabase})
  - (inline) (Reference UserType) ref <ctx context.Context> @ FrontendService
  - (InterfaceVariable UserType) ctx context.Context
  - |-
    (inline) (Reference BasicType) ref <userID string> @ FrontendService -->
       w-tainted 3x: write(shipqueue.Shipment.Name, shipdb.Shipment.Name, order_db.Order.CustomerID)
  - |-
    (BasicVariable BasicType) customerID string -->
       w-tainted 3x: write(shipqueue.Shipment.Name, shipdb.Shipment.Name, order_db.Order.CustomerID)
  - (inline) (Reference BasicType) ref <addressID string> @ FrontendService
  - (BasicVariable BasicType) addressID string
  - (inline) (Reference BasicType) ref <cardID string> @ FrontendService
  - (BasicVariable BasicType) cardID string
  - (inline) (Reference BasicType) ref <cartID string> @ FrontendService
  - (BasicVariable BasicType) cartID string
  - (StructVariable UserType) wg sync.WaitGroup
  - |-
    (ArrayVariable ArrayType) items []cart.Item struct{ID string, Quantity int, UnitPrice float32} -->
       w-tainted 1x: write(order_db.Order.Items)
  - (ArrayVariable ArrayType) addresses []user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
  - (ArrayVariable ArrayType) cards []user.Card struct{LongNum string, Expires string, CCV string, ID string}
  - |-
    (BasicVariable BasicType) amount 10 float32 -->
       w-tainted 1x: write(order_db.Order.Total)
  - |-
    (inline) (BasicVariable BasicType) "awaiting shipment" string -->
       w-tainted 2x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status)
  - |-
    (inline) (FieldVariable FieldType) Status "awaiting shipment" string -->
       w-tainted 2x: write(shipqueue.Shipment.Status, shipdb.Shipment.Status)
  - |-
    (inline) (FieldVariable FieldType) Name string -->
       w-tainted 2x: write(shipqueue.Shipment.Name, shipdb.Shipment.Name)
  - |-
    (inline) (BasicVariable BasicType) string -->
       w-tainted 2x: write(shipqueue.Shipment.ID, shipdb.Shipment.ID)
  - |-
    (inline) (FieldVariable FieldType) ID string -->
       w-tainted 2x: write(shipqueue.Shipment.ID, shipdb.Shipment.ID)
  - |-
    (StructVariable UserType) shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string} -->
       w-tainted 2x: write(shipqueue.Shipment, shipdb.Shipment)
  - |-
    (inline) (BasicVariable BasicType) ID string -->
       w-tainted 2x: write(order_db.Order.ID, order_db.Order.Shipment.ID)
  - |-
    (inline) (FieldVariable FieldType) ID string -->
       w-tainted 1x: write(order_db.Order.Shipment.ID)
  - |-
    (StructVariable UserType) shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string} -->
       w-tainted 1x: write(order_db.Order.Shipment)
  - (InterfaceVariable UserType) err .error
  - |-
    (inline) (FieldVariable FieldType) Total 10 float32 -->
       w-tainted 1x: write(order_db.Order.Total)
  - |-
    (inline) (FieldVariable FieldType) Shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string} -->
       w-tainted 1x: write(order_db.Order.Shipment)
  - |-
    (inline) (FieldVariable FieldType) Items []cart.Item struct{ID string, Quantity int, UnitPrice float32} -->
       w-tainted 1x: write(order_db.Order.Items)
  - |-
    (inline) (FieldVariable FieldType) ID string -->
       w-tainted 1x: write(order_db.Order.ID)
  - |-
    (inline) (BasicVariable BasicType) string -->
       w-tainted 1x: write(order_db.Order.Date)
  - |-
    (inline) (FieldVariable FieldType) Date string -->
       w-tainted 1x: write(order_db.Order.Date)
  - |-
    (inline) (FieldVariable FieldType) CustomerID string -->
       w-tainted 1x: write(order_db.Order.CustomerID)
  - |-
    (inline) (StructVariable UserType) user.Card struct{LongNum string, Expires string, CCV string, ID string} -->
       w-tainted 1x: write(order_db.Order.Card)
  - |-
    (inline) (FieldVariable FieldType) Card user.Card struct{LongNum string, Expires string, CCV string, ID string} -->
       w-tainted 1x: write(order_db.Order.Card)
  - |-
    (inline) (StructVariable UserType) user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string} -->
       w-tainted 1x: write(order_db.Order.Address)
  - |-
    (inline) (FieldVariable FieldType) Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string} -->
       w-tainted 1x: write(order_db.Order.Address)
  - |-
    (StructVariable UserType) order order.Order struct{ID string, CustomerID string, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string}, Date string, Total 10 float32, Total float32} -->
       w-tainted 1x: write(order_db.Order)
  - (BlueprintBackendVariable BlueprintBackendType) collection NoSQLCollection {database = order_service, collection = orders}
  - (InterfaceVariable UserType) _ .error
  - (InterfaceVariable UserType) err .error

.NewOrderService(ctx context.Context, userService user.UserService, cartService cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, orderDB NoSQLDatabase)
:
 block 0 (Body):
  - (InterfaceVariable UserType) ctx context.Context
  - (ServiceVariable ServiceType) userService user.UserService
  - (ServiceVariable ServiceType) cartService cart.CartService
  - (ServiceVariable ServiceType) payments payment.PaymentService
  - (ServiceVariable ServiceType) shipping shipping.ShippingService
  - (BlueprintBackendVariable BlueprintBackendType) orderDB NoSQLDatabase
