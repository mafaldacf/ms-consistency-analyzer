? (*catalogueImpl).AddSock(ctx context.Context, sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string})
:
 block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (StructObject UserType) sock catalogue.Sock struct{ID string, Name
    string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string,
    Price float32, Quantity int, Tags []string, TagString string} --> w-tainted 1x:
    write(catalogue_db.Sock)'
  - '_1 depth 1 (Reference UserType) ref <sock catalogue.Sock struct{ID string, Name
    string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string,
    Price float32, Quantity int, Tags []string, TagString string}> @ FrontendService
    --> w-tainted 1x: write(catalogue_db.Sock)'
  - _2 depth 1 (FieldObject FieldType) ID string
  - __3 depth 2 (BasicObject BasicType) ID string
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*catalogueImpl).AddTags(ctx context.Context, tags []string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (ArrayObject ArrayType) tags []string
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) update primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "tags" string, Key "tags" string, Value []string, Value []string}
  - __2 depth 2 (FieldObject FieldType) Key "tags" string
  - ___3 depth 3 (BasicObject BasicType) "tags" string
  - __4 depth 2 (FieldObject FieldType) Value []string
  - 0 depth 0 (SliceObject UserType) filter primitive.D

(*catalogueImpl).Count(ctx context.Context, tags []string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (ArrayObject ArrayType) tags []string
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (ArrayObject ArrayType) socks []catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*catalogueImpl).DeleteSock(ctx context.Context, id string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (BasicObject BasicType) id string
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) query primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "id" string, Key "id" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "id" string
  - ___3 depth 3 (BasicObject BasicType) "id" string
  - __4 depth 2 (FieldObject FieldType) Value string

(*catalogueImpl).Get(ctx context.Context, id string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - _2 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - _3 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) id string --> r-tainted 1x: read(catalogue_db._.id)'
  - '_1 depth 1 (Reference BasicType) ref <itemID string> @ FrontendService --> r-tainted
    1x: read(catalogue_db._.id)'
  - '_2 depth 1 (Reference BasicType) ref <itemID string> @ FrontendService --> r-tainted
    1x: read(catalogue_db._.id)'
  - '_3 depth 1 (Reference BasicType) ref <itemID string> @ FrontendService --> r-tainted
    1x: read(catalogue_db._.id)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) query primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "id" string, Key "id" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "id" string
  - ___3 depth 3 (BasicObject BasicType) "id" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - '0 depth 0 (StructObject UserType) sock catalogue.Sock struct{ID string, Name
    string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string,
    Price float32, Quantity int, Tags []string, TagString string} --> r-tainted 7x:
    read(catalogue_db.Sock, catalogue_db.Sock.ImageURL, catalogue_db.Sock.string,
    catalogue_db.Sock.ImageURL_1, catalogue_db.Sock.ImageURL_2, catalogue_db.Sock.TagString,
    catalogue_db.Sock.Tags)'
  - '_1 depth 1 (FieldObject FieldType) ImageURL []string --> r-tainted 1x: read(catalogue_db.Sock.ImageURL)'
  - '__2 depth 2 (ArrayObject SliceType) []string --> r-tainted 1x: read(catalogue_db.Sock.ImageURL)'
  - '___3 depth 3 (BasicObject BasicType) ImageURL_1 string --> r-tainted 2x: read(catalogue_db.Sock.string,
    catalogue_db.Sock.ImageURL_1)'
  - '___4 depth 3 (BasicObject BasicType) ImageURL_2 string --> r-tainted 2x: read(catalogue_db.Sock.string,
    catalogue_db.Sock.ImageURL_2)'
  - '_5 depth 1 (FieldObject FieldType) ImageURL_1 string --> r-tainted 1x: read(catalogue_db.Sock.ImageURL_1)'
  - '__6 depth 2 (BasicObject BasicType) ImageURL_1 string --> r-tainted 2x: read(catalogue_db.Sock.string,
    catalogue_db.Sock.ImageURL_1)'
  - '_7 depth 1 (FieldObject FieldType) ImageURL_2 string --> r-tainted 1x: read(catalogue_db.Sock.ImageURL_2)'
  - '__8 depth 2 (BasicObject BasicType) ImageURL_2 string --> r-tainted 2x: read(catalogue_db.Sock.string,
    catalogue_db.Sock.ImageURL_2)'
  - '_9 depth 1 (FieldObject FieldType) TagString string --> r-tainted 1x: read(catalogue_db.Sock.TagString)'
  - '__10 depth 2 (BasicObject BasicType) TagString string --> r-tainted 1x: read(catalogue_db.Sock.TagString)'
  - '_11 depth 1 (FieldObject FieldType) Tags []string --> r-tainted 1x: read(catalogue_db.Sock.Tags)'
  - '__12 depth 2 (SliceObject SliceType) []string --> r-tainted 1x: read(catalogue_db.Sock.Tags)'
  - '___14 depth 3 (BasicObject BasicType) "," string --> r-tainted 1x: read(catalogue_db.Sock.string)'
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = catalogue, collection = catalogue} --> r-tainted 1x: read(catalogue_db._)'
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*catalogueImpl).List(ctx context.Context, tags []string, order string, pageNum int, pageSize int):
  block 8 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - 0 depth 0 (ArrayObject ArrayType) tags []string
  - _1 depth 1 (Reference ArrayType) ref <tags []string> @ FrontendService
  - 0 depth 0 (BasicObject BasicType) order string
  - _1 depth 1 (Reference BasicType) ref <order string> @ FrontendService
  - 0 depth 0 (BasicObject BasicType) pageNum int
  - _1 depth 1 (Reference BasicType) ref <pageNum int> @ FrontendService
  - 0 depth 0 (BasicObject BasicType) pageSize int
  - _1 depth 1 (Reference BasicType) ref <pageSize int> @ FrontendService
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (ArrayObject ArrayType) allSocks []catalogue.Sock struct{ID string,
    Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2
    string, Price float32, Quantity int, Tags []string, TagString string} --> r-tainted
    1x: read(catalogue_db.[]catalogue.Sock struct{ID string, Name string, Description
    string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32,
    Quantity int, Tags []string, TagString string})'
  - 0 depth 0 (ArrayObject ArrayType) socks []catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}
  - _1 depth 1 (StructObject UserType) sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}
  - __3 depth 2 (FieldObject FieldType) Tags []string
  - ___4 depth 3 (SliceObject SliceType) Tags []string
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = catalogue, collection = catalogue} --> r-tainted 1x: read(catalogue_db._)'
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (BasicObject BasicType) tag string

(*catalogueImpl).Tags(ctx context.Context):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = catalogue, collection = catalogue}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (ArrayObject ArrayType) socks []catalogue.Sock struct{ID string, Name
    string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string,
    Price float32, Quantity int, Tags []string, TagString string} --> r-tainted 1x:
    read(catalogue_db.[]catalogue.Sock struct{ID string, Name string, Description
    string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32,
    Quantity int, Tags []string, TagString string})'
  - 0 depth 0 (SliceObject UserType) projection primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "tags" string, Key "tags" string, Value true bool, Value true bool}
  - __2 depth 2 (FieldObject FieldType) Key "tags" string
  - ___3 depth 3 (BasicObject BasicType) "tags" string
  - __4 depth 2 (FieldObject FieldType) Value true bool
  - ___5 depth 3 (BasicObject BasicType) true bool
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = catalogue, collection = catalogue} --> r-tainted 1x: read(catalogue_db._)'
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (ArrayObject ArrayType) tags []string

.NewCatalogueService(ctx context.Context, catalogue_db NoSQLDatabase):
  block 0 (Body):
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) catalogue_db NoSQLDatabase
  - 0 depth 0 (PointerObject PointerType) c (*catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) catalogue.catalogueImpl struct{catalogue_db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) catalogue_db NoSQLDatabase
