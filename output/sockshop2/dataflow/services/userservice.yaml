(*userServiceImpl).Delete(ctx context.Context, entity string, id string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (BasicObject BasicType) entity string
  - 0 depth 0 (BasicObject BasicType) id string
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) query primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "id" string, Key "id" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "id" string
  - ___3 depth 3 (BasicObject BasicType) "id" string
  - __4 depth 2 (FieldObject FieldType) Value string

(*userServiceImpl).GetAddresses(ctx context.Context, addressid string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - _2 depth 1 (Reference UserType) ref <ctx context.Context> @ OrderService
  - __3 depth 2 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) addressid string --> r-tainted 1x: read(user_db._.addresses)'
  - '_1 depth 1 (Reference BasicType) ref <addressID string> @ FrontendService -->
    r-tainted 1x: read(user_db._.addresses)'
  - '_2 depth 1 (Reference BasicType) ref <addressID string> @ OrderService --> r-tainted
    1x: read(user_db._.addresses)'
  - '__3 depth 2 (Reference BasicType) ref <addressID string> @ FrontendService -->
    r-tainted 1x: read(user_db._.addresses)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (ArrayObject ArrayType) addresses []user.Address struct{Street string,
    Number string, Country string, City string, PostCode string, ID string} --> r-tainted
    1x: read(user_db.[]user.Address struct{Street string, Number string, Country string,
    City string, PostCode string, ID string})'
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "addresses" string, Key "addresses" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "addresses" string
  - ___3 depth 3 (BasicObject BasicType) "addresses" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - 0 depth 0 (SliceObject UserType) projection primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "addresses" string, Key "addresses" string, Value true bool, Value true bool}
  - __2 depth 2 (FieldObject FieldType) Key "addresses" string
  - ___3 depth 3 (BasicObject BasicType) "addresses" string
  - __4 depth 2 (FieldObject FieldType) Value true bool
  - ___5 depth 3 (BasicObject BasicType) true bool
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = users, collection = users} --> r-tainted 1x: read(user_db._)'
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*userServiceImpl).GetCards(ctx context.Context, cardid string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - _2 depth 1 (Reference UserType) ref <ctx context.Context> @ OrderService
  - __3 depth 2 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) cardid string --> r-tainted 1x: read(user_db._.cards)'
  - '_1 depth 1 (Reference BasicType) ref <cardID string> @ FrontendService --> r-tainted
    1x: read(user_db._.cards)'
  - '_2 depth 1 (Reference BasicType) ref <cardID string> @ OrderService --> r-tainted
    1x: read(user_db._.cards)'
  - '__3 depth 2 (Reference BasicType) ref <cardID string> @ FrontendService --> r-tainted
    1x: read(user_db._.cards)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (ArrayObject ArrayType) cards []user.Card struct{LongNum string, Expires
    string, CCV string, ID string} --> r-tainted 1x: read(user_db.[]user.Card struct{LongNum
    string, Expires string, CCV string, ID string})'
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "cards" string, Key "cards" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "cards" string
  - ___3 depth 3 (BasicObject BasicType) "cards" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - 0 depth 0 (SliceObject UserType) projection primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "cards" string, Key "cards" string, Value true bool, Value true bool}
  - __2 depth 2 (FieldObject FieldType) Key "cards" string
  - ___3 depth 3 (BasicObject BasicType) "cards" string
  - __4 depth 2 (FieldObject FieldType) Value true bool
  - ___5 depth 3 (BasicObject BasicType) true bool
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = users, collection = users} --> r-tainted 1x: read(user_db._)'
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*userServiceImpl).GetUsers(ctx context.Context, userid string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ OrderService
  - __2 depth 2 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - _3 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) userid string --> w-tainted 3x: write(shipqueue.Shipment.Name,
    shipdb.Shipment.Name, order_db.Order.Shipment) --> r-tainted 2x: read(user_db._.userid,
    shipqueue.Shipment.Name)'
  - '_1 depth 1 (Reference BasicType) ref <customerID string> @ OrderService --> w-tainted
    4x: write(shipqueue.Shipment.Name, shipdb.Shipment.Name, order_db.Order.CustomerID,
    order_db.Order.Shipment) --> r-tainted 2x: read(shipqueue.Shipment.Name, user_db._.userid)'
  - '__2 depth 2 (Reference BasicType) ref <userID string> @ FrontendService --> w-tainted
    3x: write(shipqueue.Shipment.Name, shipdb.Shipment.Name, order_db.Order.Shipment)
    --> r-tainted 2x: read(user_db._.userid, shipqueue.Shipment.Name)'
  - '_3 depth 1 (Reference BasicType) ref <userID string> @ FrontendService --> r-tainted
    1x: read(user_db._.userid)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - '0 depth 0 (ArrayObject ArrayType) users []user.User struct{FirstName string,
    LastName string, Email string, Username string, Password string, Addresses user.Address
    struct{Street string, Number string, Country string, City string, PostCode string,
    ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string,
    ID string}, UserID string, Salt string} --> r-tainted 1x: read(user_db.[]user.User
    struct{FirstName string, LastName string, Email string, Username string, Password
    string, Addresses user.Address struct{Street string, Number string, Country string,
    City string, PostCode string, ID string}, Cards user.Card struct{LongNum string,
    Expires string, CCV string, ID string}, UserID string, Salt string})'
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "userid" string, Key "userid" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "userid" string
  - ___3 depth 3 (BasicObject BasicType) "userid" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = users, collection = users} --> r-tainted 1x: read(user_db._)'
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*userServiceImpl).Login(ctx context.Context, username string, password string):
  block 2 (IfDone):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) username string --> r-tainted 1x: read(user_db._.username)'
  - '_1 depth 1 (Reference BasicType) ref <username string> @ FrontendService -->
    r-tainted 1x: read(user_db._.username)'
  - 0 depth 0 (BasicObject BasicType) password string
  - _1 depth 1 (Reference BasicType) ref <password string> @ FrontendService
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) query primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "username" string, Key "username" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "username" string
  - ___3 depth 3 (BasicObject BasicType) "username" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - 0 depth 0 (SliceObject UserType) projection primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "password" string, Key "password" string, Value true bool, Value true bool}
  - __2 depth 2 (FieldObject FieldType) Key "password" string
  - ___3 depth 3 (BasicObject BasicType) "password" string
  - __4 depth 2 (FieldObject FieldType) Value true bool
  - ___5 depth 3 (BasicObject BasicType) true bool
  - '0 depth 0 (StructObject UserType) user user.User struct{FirstName string, LastName
    string, Email string, Username string, Password string, Addresses user.Address
    struct{Street string, Number string, Country string, City string, PostCode string,
    ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string,
    ID string}, UserID string, Salt string} --> r-tainted 1x: read(user_db.User)'
  - '0 depth 0 (BlueprintBackendObject BlueprintBackendType) result NoSQLCursor {database
    = users, collection = users} --> r-tainted 1x: read(user_db._)'
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*userServiceImpl).PostAddress(ctx context.Context, userid string, address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string})
:
 block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - 0 depth 0 (BasicObject BasicType) userid string
  - _1 depth 1 (Reference BasicType) ref <userID string> @ FrontendService
  - 0 depth 0 (StructObject UserType) address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
  - _1 depth 1 (Reference UserType) ref <address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}> @ FrontendService
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "userid" string, Key "userid" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "userid" string
  - ___3 depth 3 (BasicObject BasicType) "userid" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - 0 depth 0 (SliceObject UserType) update primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "address" string, Key "address" string, Value user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Value user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}}
  - __2 depth 2 (FieldObject FieldType) Key "address" string
  - ___3 depth 3 (BasicObject BasicType) "address" string
  - __4 depth 2 (FieldObject FieldType) Value user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}

(*userServiceImpl).PostCard(ctx context.Context, userid string, card user.Card struct{LongNum string, Expires string, CCV string, ID string})
:
 block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - 0 depth 0 (BasicObject BasicType) userid string
  - _1 depth 1 (Reference BasicType) ref <userID string> @ FrontendService
  - 0 depth 0 (StructObject UserType) card user.Card struct{LongNum string, Expires string, CCV string, ID string}
  - _1 depth 1 (Reference UserType) ref <card user.Card struct{LongNum string, Expires string, CCV string, ID string}> @ FrontendService
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error
  - 0 depth 0 (SliceObject UserType) filter primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "userid" string, Key "userid" string, Value string, Value string}
  - __2 depth 2 (FieldObject FieldType) Key "userid" string
  - ___3 depth 3 (BasicObject BasicType) "userid" string
  - __4 depth 2 (FieldObject FieldType) Value string
  - 0 depth 0 (SliceObject UserType) update primitive.D
  - _1 depth 1 (StructObject StructType) struct{Key "card" string, Key "card" string, Value user.Card struct{LongNum string, Expires string, CCV string, ID string},
    Value user.Card struct{LongNum string, Expires string, CCV string, ID string}}
  - __2 depth 2 (FieldObject FieldType) Key "card" string
  - ___3 depth 3 (BasicObject BasicType) "card" string
  - __4 depth 2 (FieldObject FieldType) Value user.Card struct{LongNum string, Expires string, CCV string, ID string}

(*userServiceImpl).PostUser(ctx context.Context, u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string})
:
 block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (StructObject UserType) u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}
  - _1 depth 1 (FieldObject FieldType) UserID string
  - __2 depth 2 (BasicObject BasicType) UserID string
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error

(*userServiceImpl).Register(ctx context.Context, username string, password string, email string, first string, last string):
  block 0 (Body):
  - 0 depth 0 (PointerObject PointerType) s (*user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase})
  - _1 depth 1 (StructObject UserType) user.userServiceImpl struct{UserService user.UserService, db NoSQLDatabase}
  - __2 depth 2 (FieldObject FieldType) db NoSQLDatabase
  - ___3 depth 3 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - _1 depth 1 (Reference UserType) ref <ctx context.Context> @ FrontendService
  - '0 depth 0 (BasicObject BasicType) username string --> w-tainted 1x: write(user_db.User.Username)'
  - '_1 depth 1 (Reference BasicType) ref <username string> @ FrontendService -->
    w-tainted 1x: write(user_db.User.Username)'
  - '0 depth 0 (BasicObject BasicType) password string --> w-tainted 1x: write(user_db.User.Password)'
  - '_1 depth 1 (Reference BasicType) ref <password string> @ FrontendService -->
    w-tainted 1x: write(user_db.User.Password)'
  - '0 depth 0 (BasicObject BasicType) email string --> w-tainted 1x: write(user_db.User.Email)'
  - '_1 depth 1 (Reference BasicType) ref <email string> @ FrontendService --> w-tainted
    1x: write(user_db.User.Email)'
  - '0 depth 0 (BasicObject BasicType) first string --> w-tainted 1x: write(user_db.User.FirstName)'
  - '_1 depth 1 (Reference BasicType) ref <first string> @ FrontendService --> w-tainted
    1x: write(user_db.User.FirstName)'
  - '0 depth 0 (BasicObject BasicType) last string --> w-tainted 1x: write(user_db.User.LastName)'
  - '_1 depth 1 (Reference BasicType) ref <last string> @ FrontendService --> w-tainted
    1x: write(user_db.User.LastName)'
  - '0 depth 0 (StructObject UserType) u user.User struct{FirstName string, LastName
    string, Email string, Username string, Password string, Addresses user.Address
    struct{Street string, Number string, Country string, City string, PostCode string,
    ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string,
    ID string}, UserID string, Salt string} --> w-tainted 1x: write(user_db.User)'
  - '_1 depth 1 (FieldObject FieldType) Addresses user.Address struct{Street string,
    Number string, Country string, City string, PostCode string, ID string} --> w-tainted
    1x: write(user_db.User.Addresses)'
  - '__2 depth 2 (StructObject UserType) user.Address struct{Street string, Number
    string, Country string, City string, PostCode string, ID string} --> w-tainted
    1x: write(user_db.User.Addresses)'
  - '_3 depth 1 (FieldObject FieldType) Cards user.Card struct{LongNum string, Expires
    string, CCV string, ID string} --> w-tainted 1x: write(user_db.User.Cards)'
  - '__4 depth 2 (StructObject UserType) user.Card struct{LongNum string, Expires
    string, CCV string, ID string} --> w-tainted 1x: write(user_db.User.Cards)'
  - '_5 depth 1 (FieldObject FieldType) Email string --> w-tainted 1x: write(user_db.User.Email)'
  - '__6 depth 2 (BasicObject BasicType) email string --> w-tainted 1x: write(user_db.User.Email)'
  - '_8 depth 1 (FieldObject FieldType) FirstName string --> w-tainted 1x: write(user_db.User.FirstName)'
  - '__9 depth 2 (BasicObject BasicType) first string --> w-tainted 1x: write(user_db.User.FirstName)'
  - '_11 depth 1 (FieldObject FieldType) LastName string --> w-tainted 1x: write(user_db.User.LastName)'
  - '__12 depth 2 (BasicObject BasicType) last string --> w-tainted 1x: write(user_db.User.LastName)'
  - '_14 depth 1 (FieldObject FieldType) Password string --> w-tainted 1x: write(user_db.User.Password)'
  - '__15 depth 2 (BasicObject BasicType) password string --> w-tainted 1x: write(user_db.User.Password)'
  - _17 depth 1 (FieldObject FieldType) UserID string
  - __18 depth 2 (BasicObject BasicType) UserID string
  - '_19 depth 1 (FieldObject FieldType) Username string --> w-tainted 1x: write(user_db.User.Username)'
  - '__20 depth 2 (BasicObject BasicType) username string --> w-tainted 1x: write(user_db.User.Username)'
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) collection NoSQLCollection
    {database = users, collection = users}
  - 0 depth 0 (InterfaceObject UserType) _ .error

.NewUserServiceImpl(ctx context.Context, db NoSQLDatabase):
  block 0 (Body):
  - 0 depth 0 (InterfaceObject UserType) ctx context.Context
  - 0 depth 0 (BlueprintBackendObject BlueprintBackendType) db NoSQLDatabase
