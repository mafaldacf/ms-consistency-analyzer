CART_DB:
- type: NoSQLDatabase
- kind: MongoDB
- dependencies: []
- schema:
  - fields: []
  - unfolded_fields: []
  - foreign_fields: []

CATALOGUE_DB:
- type: NoSQLDatabase
- kind: MongoDB
- dependencies: []
- schema:
  - fields:
    - document: catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}
    - Sock: catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}
  - unfolded_fields:
    - Sock.ID: string
    - Sock.Name: string
    - Sock.Description: string
    - Sock.ImageURL: '[]string'
    - Sock.ImageURL_1: string
    - Sock.ImageURL_2: string
    - Sock.Price: float32
    - Sock.Quantity: int
    - Sock.Tags: '[]string'
    - Sock.TagString: string
  - foreign_fields: []

ORDER_DB:
- type: NoSQLDatabase
- kind: MongoDB
- dependencies:
  - shipqueue
  - shipdb
- schema:
  - fields:
    - document: order.Order struct{ID string, CustomerID string, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string}, Date string, Total 10 float32, Total float32}
    - Order: order.Order struct{ID string, CustomerID string, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status "awaiting shipment" string}, Date string, Total 10 float32, Total float32}
  - unfolded_fields:
    - Order.ID: string
    - Order.CustomerID: string
    - Order.Address: user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
    - Order.Address.Street: string
    - Order.Address.Number: string
    - Order.Address.Country: string
    - Order.Address.City: string
    - Order.Address.PostCode: string
    - Order.Address.ID: string
    - Order.Card: user.Card struct{LongNum string, Expires string, CCV string, ID string}
    - Order.Card.LongNum: string
    - Order.Card.Expires: string
    - Order.Card.CCV: string
    - Order.Card.ID: string
    - Order.Items: '[]cart.Item struct{ID string, Quantity int, UnitPrice float32}'
    - Order.Shipment: shipping.Shipment struct{ID string, Name string, Status "awaiting
        shipment" string}
    - Order.Shipment.ID: string
    - Order.Shipment.Name: string
    - Order.Shipment.Status: '"awaiting shipment" string'
    - Order.Date: string
    - Order.Total: 10 float32
    - Order.Total: float32
  - foreign_fields:
    - Order:
      - SHIPDB.Shipment.Name
      - SHIPQUEUE.Shipment.Name
    - Order.CustomerID:
      - SHIPDB.Shipment.Name
      - SHIPQUEUE.Shipment.Name

SHIPDB:
- type: NoSQLDatabase
- kind: MongoDB
- dependencies:
  - shipqueue
- schema:
  - fields:
    - document: shipping.Shipment struct{ID string, Name string, Status string}
    - Shipment: shipping.Shipment struct{ID string, Name string, Status string}
  - unfolded_fields:
    - Shipment.ID: string
    - Shipment.Name: string
    - Shipment.Status: string
  - foreign_fields:
    - Shipment:
      - SHIPQUEUE.Shipment
      - SHIPQUEUE.Shipment.ID
      - SHIPQUEUE.Shipment.Name
      - SHIPQUEUE.Shipment.Status
    - Shipment.ID:
      - SHIPQUEUE.Shipment.ID
    - Shipment.Name:
      - SHIPQUEUE.Shipment.Name
    - Shipment.Status:
      - SHIPQUEUE.Shipment.Status

SHIPQUEUE:
- type: Queue
- kind: RabbitMQ
- dependencies: []
- schema:
  - fields:
    - message: shipping.Shipment struct{ID string, Name string, Status string}
    - Shipment: shipping.Shipment struct{ID string, Name string, Status string}
  - unfolded_fields:
    - Shipment.ID: string
    - Shipment.Name: string
    - Shipment.Status: string
  - foreign_fields: []

USER_DB:
- type: NoSQLDatabase
- kind: MongoDB
- dependencies: []
- schema:
  - fields:
    - document: user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards
        user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID
        string, Salt string}
    - User: user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card
        struct{LongNum string, Expires string, CCV string, ID string}, UserID string,
        Salt string}
  - unfolded_fields:
    - User.FirstName: string
    - User.LastName: string
    - User.Email: string
    - User.Username: string
    - User.Password: string
    - User.Addresses: user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
    - User.Addresses.Street: string
    - User.Addresses.Number: string
    - User.Addresses.Country: string
    - User.Addresses.City: string
    - User.Addresses.PostCode: string
    - User.Addresses.ID: string
    - User.Cards: user.Card struct{LongNum string, Expires string, CCV string, ID string}
    - User.Cards.LongNum: string
    - User.Cards.Expires: string
    - User.Cards.CCV: string
    - User.Cards.ID: string
    - User.UserID: string
    - User.Salt: string
  - foreign_fields: []
