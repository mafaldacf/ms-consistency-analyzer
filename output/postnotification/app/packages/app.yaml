"":
- package: ""
- package path: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification/...
- module: ""
- files: []
- imports (extracted from package): []
- imports (extracted from source files): []
- imported types: []
- imported constants: []
- imported variables: []
- declared types: []
- declared variables: []
- declared constants: []
- service types: []
- datastore types: []
- parsed methods: []

common:
- package: common
- package path: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification/common
- module: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/common/utils.go
- imports (extracted from package):
  - strconv
- imports (extracted from source files):
  - strconv
- imported types:
  - .error
- imported constants: []
- imported variables: []
- declared types: []
- declared variables:
  - HelloWorld_Variable string
- declared constants:
  - HELLO_WORLD_CONST "HELLO WORLD!" untyped string
- service types: []
- datastore types: []
- parsed methods:
  - common.Int64ToString(i int64) string
  - common.StringToInt64(s string) (int64, error)

postnotification:
- package: postnotification
- package path: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification
- module: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/AnalyticsService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/MediaService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/NotifyService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/StorageService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/TimelineService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/UploadService.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/models.go
- imports (extracted from package):
  - context
  - github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification/common
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - go.mongodb.org/mongo-driver/bson
  - math/rand
  - strconv
  - sync
- imports (extracted from source files):
  - (backend) github.com/blueprint-uservices/blueprint/runtime/core/backend
  - (bson) go.mongodb.org/mongo-driver/bson
  - (common) github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification/common
  - (rand) math/rand
  - context
  - strconv
  - sync
- imported types:
  - .error
  - Cache interface{Cache.Put(ctx context.Context, key string, value interface{}),
    Cache.Get(ctx context.Context, key string, value interface{}), Cache.Mget(ctx context.Context, key []string, key []interface{})}
  - NoSQLCollection interface{NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.NoSQLCollection.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.UpdateMany(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.ReplaceOne(ctx context.Context, filter bson.D, interface{}), NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.NoSQLCollection.InsertMany(ctx context.Context, key []interface{}), NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.NoSQLCollection.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.NoSQLCursor.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.NoSQLCursor.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
  - atomic.Uint64
  - atomic.align64
  - atomic.noCopy
  - context.Context
  - primitive.D
  - primitive.E
  - sync.WaitGroup
  - sync.noCopy
- imported constants: []
- imported variables: []
- declared types:
  - postnotification.Analytics struct{PostID int64}
  - postnotification.AnalyticsService
  - postnotification.AnalyticsServiceImpl struct{analyticsQueue Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})},
    analyticsDb NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, numWorkers int}
  - postnotification.Creator struct{Username string}
  - postnotification.Media struct{MediaID int64, Content string}
  - postnotification.MediaService
  - postnotification.MediaServiceImpl struct{mediaDb NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
  - postnotification.Message struct{ReqID string, PostID string, Timestamp string}
  - postnotification.NotifyService
  - postnotification.NotifyServiceImpl struct{storageService postnotification.StorageService, notificationsQueue Queue interface{Queue.Push(ctx context.Context, item interface{}),
    Queue.Pop(ctx context.Context, item interface{})}, num_workers int}
  - postnotification.Post struct{ReqID int64, PostID int64, MediaID int64, Text string, Mentions []string, Timestamp int64, Creator postnotification.Creator struct{Username string}}
  - postnotification.StorageService
  - postnotification.StorageServiceImpl struct{analyticsService postnotification.AnalyticsService, mediaService postnotification.MediaService, posts_cache Cache interface{Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{}), Cache.Mget(ctx context.Context, key []string, key []interface{})}, postsDb NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}, analyticsQueue Queue
    interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}}
  - postnotification.Timeline struct{ReqID int64, PostID int64}
  - postnotification.TriggerAnalyticsMessage struct{PostID string}
  - postnotification.UploadService
  - postnotification.UploadServiceImpl struct{storageService postnotification.StorageService, mediaService postnotification.MediaService, notificationsQueue Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})},
    timelineCache Cache interface{Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{}), Cache.Mget(ctx context.Context, key []string, key []interface{})}}
- declared variables: []
- declared constants: []
- service types:
  - postnotification.AnalyticsService
  - postnotification.MediaService
  - postnotification.NotifyService
  - postnotification.StorageService
  - postnotification.UploadService
- datastore types:
  - Cache interface{Cache.Put(ctx context.Context, key string, value interface{}),
    Cache.Get(ctx context.Context, key string, value interface{}), Cache.Mget(ctx context.Context, key []string, key []interface{})}
  - NoSQLCollection interface{NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.NoSQLCollection.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.NoSQLCollection.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.UpdateMany(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.NoSQLCollection.ReplaceOne(ctx context.Context, filter bson.D, interface{}), NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.NoSQLCollection.InsertMany(ctx context.Context, key []interface{}), NoSQLDatabase.NoSQLCollection.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.NoSQLCollection.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.NoSQLCursor.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.NoSQLCursor.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
- parsed methods:
  - (*postnotification.AnalyticsServiceImpl).ReadAnalytics(ctx context.Context, postID int64) (postnotification.Analytics struct{PostID int64}, error)
  - (*postnotification.AnalyticsServiceImpl).Run(ctx context.Context) error
  - (*postnotification.AnalyticsServiceImpl).handleMessage(ctx context.Context, message postnotification.TriggerAnalyticsMessage struct{PostID string}) error
  - (*postnotification.AnalyticsServiceImpl).workerThread(ctx context.Context) error
  - (*postnotification.MediaServiceImpl).ReadMedia(ctx context.Context, mediaID int64)
    (postnotification.Media struct{MediaID int64, Content string}, error)
  - (*postnotification.MediaServiceImpl).StoreMedia(ctx context.Context, media postnotification.Media struct{MediaID int64, Content string}) (int64, error)
  - (*postnotification.NotifyServiceImpl).Run(ctx context.Context) error
  - (*postnotification.NotifyServiceImpl).handleMessage(ctx context.Context, message postnotification.Message struct{ReqID string, PostID string, Timestamp string})
    error
  - (*postnotification.NotifyServiceImpl).workerThread(ctx context.Context) error
  - (*postnotification.StorageServiceImpl).ReadPostMedia(ctx context.Context, reqID int64, postID int64) (postnotification.Media struct{MediaID int64, Content string}, error)
  - (*postnotification.StorageServiceImpl).ReadPostNoSQL(ctx context.Context, reqID int64, postID_STORAGE_SVC_READ int64) (postnotification.Post struct{ReqID int64, PostID int64, MediaID int64, Text string, Mentions []string, Timestamp int64, Creator postnotification.Creator struct{Username string}}, postnotification.Analytics struct{PostID int64}, error)
  - (*postnotification.StorageServiceImpl).StorePostNoSQL(ctx context.Context, reqID int64, post postnotification.Post struct{ReqID int64, PostID int64, MediaID int64, Text string, Mentions []string, Timestamp int64, Creator postnotification.Creator struct{Username string}}) (int64, error)
  - (*postnotification.UploadServiceImpl).ReadMedia(ctx context.Context, reqID int64, postID int64) (postnotification.Media struct{MediaID int64, Content string}, error)
  - (*postnotification.UploadServiceImpl).UploadPost(ctx context.Context, username string, text string) (int64, error)
  - postnotification.NewAnalyticsServiceImpl(ctx context.Context, analyticsDb NoSQLDatabase, analyticsQueue Queue) (postnotification.AnalyticsService, error)
  - postnotification.NewMediaServiceImpl(ctx context.Context, mediaDb NoSQLDatabase)
    (postnotification.MediaService, error)
  - postnotification.NewNotifyServiceImpl(ctx context.Context, storageService postnotification.StorageService, notificationsQueue Queue) (postnotification.NotifyService, error)
  - postnotification.NewStorageServiceImpl(ctx context.Context, analyticsService postnotification.AnalyticsService, mediaService postnotification.MediaService, posts_cache Cache, postsDb NoSQLDatabase, analyticsQueue Queue) (postnotification.StorageService, error)
  - postnotification.NewUploadServiceImpl(ctx context.Context, storageService postnotification.StorageService, mediaService postnotification.MediaService, notificationsQueue Queue, timelineCache Cache) (postnotification.UploadService, error)
