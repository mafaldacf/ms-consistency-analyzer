(*StorageServiceImpl).ReadPostMedia(ctx context.Context, reqID int64, postID int64):
- DATASTORE CALL @ posts_cache >> Cache.Get(ctx context.Context, key string, value interface{}) (err, interface{})
- SERVICE CALL @ ReadMedia >> (*postnotification.MediaServiceImpl).ReadMedia(ctx context.Context, mediaID int64) (postnotification.Media struct{MediaID int64, Content string}, error)

(*StorageServiceImpl).ReadPostNoSQL(ctx context.Context, reqID int64, postID_STORAGE_SVC_READ int64):
- DATASTORE CALL @ posts_db >> NoSQLDatabase.NoSQLCollection.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor, interface{})
- SERVICE CALL @ ReadAnalytics >> (*postnotification.AnalyticsServiceImpl).ReadAnalytics(ctx context.Context, postID int64) (postnotification.Analytics struct{PostID int64}, error)

(*StorageServiceImpl).StorePostNoSQL(ctx context.Context, reqID int64, post postnotification.Post struct{ReqID int64, PostID int64, MediaID int64, Text string, Mentions []string, Timestamp int64, Creator postnotification.Creator struct{Username string}})
:
	- DATASTORE CALL @ posts_db >> NoSQLDatabase.NoSQLCollection.InsertOne(ctx context.Context, document interface{}) interface{}
  - DATASTORE CALL @ analytics_queue >> Queue.Push(ctx context.Context, item interface{})
    (err, interface{})

.NewAnalyticsServiceImpl(ctx context.Context, analyticsDb NoSQLDatabase, analyticsQueue Queue): []

.NewMediaServiceImpl(ctx context.Context, mediaDb NoSQLDatabase): []

.NewNotifyServiceImpl(ctx context.Context, storageService postnotification.StorageService, notificationsQueue Queue): []

.NewStorageServiceImpl(ctx context.Context, analyticsService postnotification.AnalyticsService, mediaService postnotification.MediaService, posts_cache Cache, postsDb NoSQLDatabase, analyticsQueue Queue)
:
 []

.NewUploadServiceImpl(ctx context.Context, storageService postnotification.StorageService, mediaService postnotification.MediaService, notificationsQueue Queue, timelineCache Cache)
:
 []
