// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"github.com/blueprint-uservices/blueprint/examples/post_notification/workflow/postnotification"
	"context"
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
)

type Frontend_HTTPServerHandler struct {
	Service postnotification.Frontend
	Address string
}

func New_Frontend_HTTPServerHandler(ctx context.Context, service postnotification.Frontend, serverAddress string) (*Frontend_HTTPServerHandler, error) {
	handler := &Frontend_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *Frontend_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/FetchPost").HandlerFunc(handler.FetchPost)
	
	router.Path("/UploadPost").HandlerFunc(handler.UploadPost)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *Frontend_HTTPServerHandler) FetchPost(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	request_postID := r.URL.Query().Get("postID")
	var postID int64
	if request_postID != "" {
		err = json.Unmarshal([]byte(request_postID), &postID)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	ctx := context.Background()
	ret0, err := handler.Service.FetchPost(ctx, postID)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 postnotification.Post
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *Frontend_HTTPServerHandler) UploadPost(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	username := r.URL.Query().Get("username")
	
	text := r.URL.Query().Get("text")
	
	ctx := context.Background()
	ret0, err := handler.Service.UploadPost(ctx, username, text)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 int64
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

