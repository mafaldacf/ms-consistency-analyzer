// Blueprint: Auto-generated by Thrift Plugin
package thrift

import (
	"context"
	"time"
	"errors"
	"github.com/apache/thrift/lib/go/thrift"
	"blueprint/goproc/frontend_proc/thrift/storageservice"
	"github.com/blueprint-uservices/blueprint/examples/post_notification/workflow/postnotification"
)

type StorageService_ThriftClient struct {
	postnotification.StorageService
	Client *storageservice.StorageServiceClient // The actual thrift-generated client
	Timeout time.Duration
	Address string
}

func New_StorageService_ThriftClient(ctx context.Context, serverAddress string) (*StorageService_ThriftClient, error) {
	handler := &StorageService_ThriftClient{}
	handler.Address = serverAddress
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TTransport
	var err error
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	transport, err = thrift.NewTSocketTimeout(handler.Address, duration, duration)
	if err != nil {
		return nil, err
	}
	transport, err = transportFactory.GetTransport(transport)
	if err != nil {
		return nil, err
	}
	err = transport.Open()
	if err != nil {
		return nil, err
	}
	iprot := protocolFactory.GetProtocol(transport)
	oprot := protocolFactory.GetProtocol(transport)

	client := storageservice.NewStorageServiceClient(thrift.NewTStandardClient(iprot, oprot))
	handler.Client = client
	handler.Timeout = duration
	return handler, nil
}


func (client *StorageService_ThriftClient) ReadPost(ctx context.Context, reqID int64, postID int64) (ret0 postnotification.Post, err error) {
	// Create and marshall the thrift Request object
	req := &storageservice.StorageService_ReadPost_Request{}
	marshall_ReadPost_req(req, reqID, postID)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.ReadPost(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	ret0 =  unmarshall_ReadPost_rsp(rsp)
	return
}

func (client *StorageService_ThriftClient) StorePost(ctx context.Context, reqID int64, post postnotification.Post) (err error) {
	// Create and marshall the thrift Request object
	req := &storageservice.StorageService_StorePost_Request{}
	marshall_StorePost_req(req, reqID, post)

	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.StorePost(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}
	if rsp == nil {
		err = errors.New("Response object is nil")
		return
	}

	 unmarshall_StorePost_rsp(rsp)
	return
}

