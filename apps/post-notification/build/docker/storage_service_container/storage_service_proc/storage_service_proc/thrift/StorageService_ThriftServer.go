// Blueprint: Auto-generated by Thrift Plugin

package thrift

import (
	"github.com/apache/thrift/lib/go/thrift"
	"blueprint/goproc/storage_service_proc/thrift/storageservice"
	"github.com/blueprint-uservices/blueprint/examples/post_notification/workflow/postnotification"
	"context"
)

type StorageService_ThriftServerHandler struct {
	Service postnotification.StorageService
	Address string
}

func New_StorageService_ThriftServerHandler(ctx context.Context, service postnotification.StorageService, serverAddress string) (*StorageService_ThriftServerHandler, error) {
	handler := &StorageService_ThriftServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is automatically called in a separate goroutine by runtime/plugins/golang/di.go
func (handler *StorageService_ThriftServerHandler) Run(ctx context.Context) error {
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactory(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TServerTransport
	var err error
	transport, err = thrift.NewTServerSocket(handler.Address)
	if err != nil {
		return err
	}
	processor := storageservice.NewStorageServiceProcessor(handler)
	server := thrift.NewTSimpleServer4(processor, transport, transportFactory, protocolFactory)

	go func() {
		select {
		case <-ctx.Done():
			server.Stop()
		}
	}()

	return server.Serve()
}


func (handler *StorageService_ThriftServerHandler) ReadPost(ctx context.Context, req *storageservice.StorageService_ReadPost_Request) (*storageservice.StorageService_ReadPost_Response, error) {
	reqID, postID := unmarshall_ReadPost_req(req)
	ret0, err := handler.Service.ReadPost(ctx, reqID, postID)
	if err != nil {
		return nil, err
	}
	rsp := &storageservice.StorageService_ReadPost_Response{}
	marshall_ReadPost_rsp(rsp, ret0)
	return rsp, nil
}

func (handler *StorageService_ThriftServerHandler) StorePost(ctx context.Context, req *storageservice.StorageService_StorePost_Request) (*storageservice.StorageService_StorePost_Response, error) {
	reqID, post := unmarshall_StorePost_req(req)
	err := handler.Service.StorePost(ctx, reqID, post)
	if err != nil {
		return nil, err
	}
	rsp := &storageservice.StorageService_StorePost_Response{}
	marshall_StorePost_rsp(rsp, )
	return rsp, nil
}

