// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package storageservice

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - ReqID
//  - PostID
//  - Text
//  - Timestamp
type Post struct {
  ReqID int64 `thrift:"ReqID,1" db:"ReqID" json:"ReqID"`
  PostID int64 `thrift:"PostID,2" db:"PostID" json:"PostID"`
  Text string `thrift:"Text,3" db:"Text" json:"Text"`
  Timestamp int64 `thrift:"Timestamp,4" db:"Timestamp" json:"Timestamp"`
}

func NewPost() *Post {
  return &Post{}
}


func (p *Post) GetReqID() int64 {
  return p.ReqID
}

func (p *Post) GetPostID() int64 {
  return p.PostID
}

func (p *Post) GetText() string {
  return p.Text
}

func (p *Post) GetTimestamp() int64 {
  return p.Timestamp
}
func (p *Post) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Post)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *Post)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *Post)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Post)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *Post) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Post"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Post) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ReqID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ReqID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ReqID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ReqID: ", p), err) }
  return err
}

func (p *Post) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "PostID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:PostID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PostID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:PostID: ", p), err) }
  return err
}

func (p *Post) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Text", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Text (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Text: ", p), err) }
  return err
}

func (p *Post) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Timestamp: ", p), err) }
  return err
}

func (p *Post) Equals(other *Post) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqID != other.ReqID { return false }
  if p.PostID != other.PostID { return false }
  if p.Text != other.Text { return false }
  if p.Timestamp != other.Timestamp { return false }
  return true
}

func (p *Post) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Post(%+v)", *p)
}

func (p *Post) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.Post",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Post)(nil)

func (p *Post) Validate() error {
  return nil
}
// Attributes:
//  - ReqID
//  - PostID
type StorageService_ReadPost_Request struct {
  ReqID int64 `thrift:"reqID,1" db:"reqID" json:"reqID"`
  PostID int64 `thrift:"postID,2" db:"postID" json:"postID"`
}

func NewStorageService_ReadPost_Request() *StorageService_ReadPost_Request {
  return &StorageService_ReadPost_Request{}
}


func (p *StorageService_ReadPost_Request) GetReqID() int64 {
  return p.ReqID
}

func (p *StorageService_ReadPost_Request) GetPostID() int64 {
  return p.PostID
}
func (p *StorageService_ReadPost_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageService_ReadPost_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *StorageService_ReadPost_Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *StorageService_ReadPost_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorageService_ReadPost_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageService_ReadPost_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqID: ", p), err) }
  return err
}

func (p *StorageService_ReadPost_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "postID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:postID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.postID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:postID: ", p), err) }
  return err
}

func (p *StorageService_ReadPost_Request) Equals(other *StorageService_ReadPost_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqID != other.ReqID { return false }
  if p.PostID != other.PostID { return false }
  return true
}

func (p *StorageService_ReadPost_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageService_ReadPost_Request(%+v)", *p)
}

func (p *StorageService_ReadPost_Request) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageService_ReadPost_Request",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageService_ReadPost_Request)(nil)

func (p *StorageService_ReadPost_Request) Validate() error {
  return nil
}
// Attributes:
//  - Ret0
type StorageService_ReadPost_Response struct {
  Ret0 *Post `thrift:"ret0,1" db:"ret0" json:"ret0"`
}

func NewStorageService_ReadPost_Response() *StorageService_ReadPost_Response {
  return &StorageService_ReadPost_Response{}
}

var StorageService_ReadPost_Response_Ret0_DEFAULT *Post
func (p *StorageService_ReadPost_Response) GetRet0() *Post {
  if !p.IsSetRet0() {
    return StorageService_ReadPost_Response_Ret0_DEFAULT
  }
  return p.Ret0
}
func (p *StorageService_ReadPost_Response) IsSetRet0() bool {
  return p.Ret0 != nil
}

func (p *StorageService_ReadPost_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageService_ReadPost_Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ret0 = &Post{}
  if err := p.Ret0.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ret0), err)
  }
  return nil
}

func (p *StorageService_ReadPost_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorageService_ReadPost_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageService_ReadPost_Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ret0", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ret0: ", p), err) }
  if err := p.Ret0.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ret0), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ret0: ", p), err) }
  return err
}

func (p *StorageService_ReadPost_Response) Equals(other *StorageService_ReadPost_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Ret0.Equals(other.Ret0) { return false }
  return true
}

func (p *StorageService_ReadPost_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageService_ReadPost_Response(%+v)", *p)
}

func (p *StorageService_ReadPost_Response) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageService_ReadPost_Response",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageService_ReadPost_Response)(nil)

func (p *StorageService_ReadPost_Response) Validate() error {
  return nil
}
// Attributes:
//  - ReqID
//  - Post
type StorageService_StorePost_Request struct {
  ReqID int64 `thrift:"reqID,1" db:"reqID" json:"reqID"`
  Post *Post `thrift:"post,2" db:"post" json:"post"`
}

func NewStorageService_StorePost_Request() *StorageService_StorePost_Request {
  return &StorageService_StorePost_Request{}
}


func (p *StorageService_StorePost_Request) GetReqID() int64 {
  return p.ReqID
}
var StorageService_StorePost_Request_Post_DEFAULT *Post
func (p *StorageService_StorePost_Request) GetPost() *Post {
  if !p.IsSetPost() {
    return StorageService_StorePost_Request_Post_DEFAULT
  }
  return p.Post
}
func (p *StorageService_StorePost_Request) IsSetPost() bool {
  return p.Post != nil
}

func (p *StorageService_StorePost_Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageService_StorePost_Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *StorageService_StorePost_Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Post = &Post{}
  if err := p.Post.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Post), err)
  }
  return nil
}

func (p *StorageService_StorePost_Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorageService_StorePost_Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageService_StorePost_Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqID: ", p), err) }
  return err
}

func (p *StorageService_StorePost_Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post: ", p), err) }
  if err := p.Post.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Post), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post: ", p), err) }
  return err
}

func (p *StorageService_StorePost_Request) Equals(other *StorageService_StorePost_Request) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqID != other.ReqID { return false }
  if !p.Post.Equals(other.Post) { return false }
  return true
}

func (p *StorageService_StorePost_Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageService_StorePost_Request(%+v)", *p)
}

func (p *StorageService_StorePost_Request) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageService_StorePost_Request",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageService_StorePost_Request)(nil)

func (p *StorageService_StorePost_Request) Validate() error {
  return nil
}
type StorageService_StorePost_Response struct {
}

func NewStorageService_StorePost_Response() *StorageService_StorePost_Response {
  return &StorageService_StorePost_Response{}
}

func (p *StorageService_StorePost_Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageService_StorePost_Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorageService_StorePost_Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageService_StorePost_Response) Equals(other *StorageService_StorePost_Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *StorageService_StorePost_Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageService_StorePost_Response(%+v)", *p)
}

func (p *StorageService_StorePost_Response) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageService_StorePost_Response",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageService_StorePost_Response)(nil)

func (p *StorageService_StorePost_Response) Validate() error {
  return nil
}
type StorageService interface {
  // Parameters:
  //  - Req
  ReadPost(ctx context.Context, req *StorageService_ReadPost_Request) (_r *StorageService_ReadPost_Response, _err error)
  // Parameters:
  //  - Req
  StorePost(ctx context.Context, req *StorageService_StorePost_Request) (_r *StorageService_StorePost_Response, _err error)
}

type StorageServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StorageServiceClient {
  return &StorageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StorageServiceClient {
  return &StorageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewStorageServiceClient(c thrift.TClient) *StorageServiceClient {
  return &StorageServiceClient{
    c: c,
  }
}

func (p *StorageServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *StorageServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *StorageServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *StorageServiceClient) ReadPost(ctx context.Context, req *StorageService_ReadPost_Request) (_r *StorageService_ReadPost_Response, _err error) {
  var _args0 StorageServiceReadPostArgs
  _args0.Req = req
  var _result2 StorageServiceReadPostResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "ReadPost", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ReadPost failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageServiceClient) StorePost(ctx context.Context, req *StorageService_StorePost_Request) (_r *StorageService_StorePost_Response, _err error) {
  var _args4 StorageServiceStorePostArgs
  _args4.Req = req
  var _result6 StorageServiceStorePostResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "StorePost", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "StorePost failed: unknown result")
}

type StorageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler StorageService
}

func (p *StorageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StorageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StorageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStorageServiceProcessor(handler StorageService) *StorageServiceProcessor {

  self8 := &StorageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["ReadPost"] = &storageServiceProcessorReadPost{handler:handler}
  self8.processorMap["StorePost"] = &storageServiceProcessorStorePost{handler:handler}
return self8
}

func (p *StorageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x9.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x9

}

type storageServiceProcessorReadPost struct {
  handler StorageService
}

func (p *storageServiceProcessorReadPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err10 error
  args := StorageServiceReadPostArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadPost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageServiceReadPostResult{}
  if retval, err2 := p.handler.ReadPost(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc11 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadPost: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ReadPost", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if err2 := _exc11.Write(ctx, oprot); _write_err10 == nil && err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err10 == nil && err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err10 == nil && err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if _write_err10 != nil {
      return false, thrift.WrapTException(_write_err10)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ReadPost", thrift.REPLY, seqId); err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err10 == nil && err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err10 == nil && err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err10 == nil && err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if _write_err10 != nil {
    return false, thrift.WrapTException(_write_err10)
  }
  return true, err
}

type storageServiceProcessorStorePost struct {
  handler StorageService
}

func (p *storageServiceProcessorStorePost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err12 error
  args := StorageServiceStorePostArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "StorePost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageServiceStorePostResult{}
  if retval, err2 := p.handler.StorePost(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc13 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StorePost: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "StorePost", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if err2 := _exc13.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if _write_err12 != nil {
      return false, thrift.WrapTException(_write_err12)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "StorePost", thrift.REPLY, seqId); err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if _write_err12 != nil {
    return false, thrift.WrapTException(_write_err12)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type StorageServiceReadPostArgs struct {
  Req *StorageService_ReadPost_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceReadPostArgs() *StorageServiceReadPostArgs {
  return &StorageServiceReadPostArgs{}
}

var StorageServiceReadPostArgs_Req_DEFAULT *StorageService_ReadPost_Request
func (p *StorageServiceReadPostArgs) GetReq() *StorageService_ReadPost_Request {
  if !p.IsSetReq() {
    return StorageServiceReadPostArgs_Req_DEFAULT
  }
  return p.Req
}
func (p *StorageServiceReadPostArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageServiceReadPostArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageServiceReadPostArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &StorageService_ReadPost_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageServiceReadPostArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageServiceReadPostArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageServiceReadPostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageServiceReadPostArgs(%+v)", *p)
}

func (p *StorageServiceReadPostArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageServiceReadPostArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageServiceReadPostArgs)(nil)

// Attributes:
//  - Success
type StorageServiceReadPostResult struct {
  Success *StorageService_ReadPost_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceReadPostResult() *StorageServiceReadPostResult {
  return &StorageServiceReadPostResult{}
}

var StorageServiceReadPostResult_Success_DEFAULT *StorageService_ReadPost_Response
func (p *StorageServiceReadPostResult) GetSuccess() *StorageService_ReadPost_Response {
  if !p.IsSetSuccess() {
    return StorageServiceReadPostResult_Success_DEFAULT
  }
  return p.Success
}
func (p *StorageServiceReadPostResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageServiceReadPostResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageServiceReadPostResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StorageService_ReadPost_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageServiceReadPostResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageServiceReadPostResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageServiceReadPostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageServiceReadPostResult(%+v)", *p)
}

func (p *StorageServiceReadPostResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageServiceReadPostResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageServiceReadPostResult)(nil)

// Attributes:
//  - Req
type StorageServiceStorePostArgs struct {
  Req *StorageService_StorePost_Request `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageServiceStorePostArgs() *StorageServiceStorePostArgs {
  return &StorageServiceStorePostArgs{}
}

var StorageServiceStorePostArgs_Req_DEFAULT *StorageService_StorePost_Request
func (p *StorageServiceStorePostArgs) GetReq() *StorageService_StorePost_Request {
  if !p.IsSetReq() {
    return StorageServiceStorePostArgs_Req_DEFAULT
  }
  return p.Req
}
func (p *StorageServiceStorePostArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageServiceStorePostArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageServiceStorePostArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &StorageService_StorePost_Request{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageServiceStorePostArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorePost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageServiceStorePostArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageServiceStorePostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageServiceStorePostArgs(%+v)", *p)
}

func (p *StorageServiceStorePostArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageServiceStorePostArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageServiceStorePostArgs)(nil)

// Attributes:
//  - Success
type StorageServiceStorePostResult struct {
  Success *StorageService_StorePost_Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageServiceStorePostResult() *StorageServiceStorePostResult {
  return &StorageServiceStorePostResult{}
}

var StorageServiceStorePostResult_Success_DEFAULT *StorageService_StorePost_Response
func (p *StorageServiceStorePostResult) GetSuccess() *StorageService_StorePost_Response {
  if !p.IsSetSuccess() {
    return StorageServiceStorePostResult_Success_DEFAULT
  }
  return p.Success
}
func (p *StorageServiceStorePostResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageServiceStorePostResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageServiceStorePostResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StorageService_StorePost_Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageServiceStorePostResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorePost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageServiceStorePostResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageServiceStorePostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageServiceStorePostResult(%+v)", *p)
}

func (p *StorageServiceStorePostResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*storageservice.StorageServiceStorePostResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StorageServiceStorePostResult)(nil)


