// Blueprint: Auto-generated by the HTTP Plugin
package http

import (
	"net/url"
	"fmt"
	"io"
	"github.com/blueprint-uservices/blueprint/examples/post_notification/workflow/postnotification"
	"net/http"
	"encoding/json"
	"context"
	"time"
)

type Frontend_HTTPClient struct {
	Client *http.Client
	Timeout time.Duration
	ServerAddress string
}

func New_Frontend_HTTPClient(ctx context.Context, serverAddress string) (*Frontend_HTTPClient, error) {
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	client := &http.Client{
		Timeout: duration,
	}
	c := &Frontend_HTTPClient{}
	c.Client = client
	c.Timeout = duration
	c.ServerAddress = "http://" + serverAddress
	return c, nil
}


func (client *Frontend_HTTPClient) FetchPost(ctx context.Context, postID int64) (ret0 postnotification.Post, err error) {
	vals := url.Values{}
	
	bytes_postID, err := json.Marshal(postID)
	if err != nil {
		return
	}
	vals.Add("postID", string(bytes_postID))
	

	encoded_url, err := url.Parse(client.ServerAddress + "/FetchPost")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 postnotification.Post
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *Frontend_HTTPClient) UploadPost(ctx context.Context, username string, text string) (ret0 int64, err error) {
	vals := url.Values{}
	
	vals.Add("username", username)
	
	vals.Add("text", text)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/UploadPost")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 int64
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

