(*TrainServiceImpl).AllTrains(ctx context.Context):
- NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = user, collection = user}, interface{})
(*TrainServiceImpl).Create(ctx context.Context, tt train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64}):
	- NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = user, collection = user}, interface{})
  - NoSQLDatabase.InsertOne(ctx context.Context, document interface{}) interface{}
(*TrainServiceImpl).Delete(ctx context.Context, id string):
- NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D) interface{}
(*TrainServiceImpl).Retrieve(ctx context.Context, id string):
- NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = user, collection = user}, interface{})
(*TrainServiceImpl).RetrieveByName(ctx context.Context, name string):
- NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = user, collection = user}, interface{})
(*TrainServiceImpl).RetrieveByNames(ctx context.Context, names []string): []
(*TrainServiceImpl).Update(ctx context.Context, ttype train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64}):
	- NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{})
    (err, interface{})
.NewTrainServiceImpl(ctx context.Context, db NoSQLDatabase): []
