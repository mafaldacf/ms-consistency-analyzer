(*AssuranceServiceImpl).Create(ctx context.Context, typeindex int64, orderid string):
- assurance.getAssuranceType(ctx context.Context, index int64) (assurance.AssuranceType struct{Index int64, Name string, Price float64}, error)
- NoSQLDatabase.InsertOne(ctx context.Context, document interface{}) interface{}
(*AssuranceServiceImpl).DeleteById(ctx context.Context, id string):
- NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D) interface{}
(*AssuranceServiceImpl).DeleteByOrderId(ctx context.Context, order_id string):
- NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D) interface{}
(*AssuranceServiceImpl).FindAssuranceById(ctx context.Context, id string):
- NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = user, collection = user}, interface{})
(*AssuranceServiceImpl).FindAssuranceByOrderId(ctx context.Context, order_id string):
- NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = user, collection = user}, interface{})
(*AssuranceServiceImpl).GetAllAssuranceTypes(ctx context.Context): []
(*AssuranceServiceImpl).GetAllAssurances(ctx context.Context):
- NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = user, collection = user}, interface{})
(*AssuranceServiceImpl).Modify(ctx context.Context, assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}}):
	- (*assurance.AssuranceServiceImpl).FindAssuranceById(ctx context.Context, id string)
    (assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}}, error)
  - NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{})
    (err, interface{})
.NewAssuranceServiceImpl(ctx context.Context, db NoSQLDatabase): []
.getAssuranceType(ctx context.Context, index int64): []
