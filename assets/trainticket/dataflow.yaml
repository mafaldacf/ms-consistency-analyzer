"": []
'":" string': []
'[]string': []
A: []
ASSURANCE_DB.Assurance:
- write <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
- write <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)> from <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
ASSURANCE_DB.Assurance.AT:
- write <AT assurance.AssuranceType struct{Index int64, Name string, Price float64} (FieldVariable)> from <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
- write <at assurance.AssuranceType struct{Index int64, Name string, Price float64} (StructVariable)> from <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
ASSURANCE_DB.Assurance.ID:
- write <id string (BasicVariable)> from <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
- write <ID string (FieldVariable)> from <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
ASSURANCE_DB.Assurance.OrderID:
- write <orderid string (BasicVariable)> from <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
- write <OrderID string (FieldVariable)> from <assurance assurance.Assurance struct{ID string, OrderID string, AT assurance.AssuranceType struct{Index int64, Name string, Price float64}} (StructVariable)>
CONFIG_DB.Config:
- write <conf config.Config struct{Name string, Value string, Description string} (StructVariable)>
- write <conf config.Config struct{Name string, Value string, Description string} (StructVariable)> from <conf config.Config struct{Name string, Value string, Description string} (StructVariable)>
CONFIG_DB.Config.Name:
- write <Name string (BasicVariable)> from <conf config.Config struct{Name string, Value string, Description string} (StructVariable)>
- write <Name string (FieldVariable)> from <conf config.Config struct{Name string, Value string, Description string} (StructVariable)>
CONSIGNPRICE_DB.ConsignPrice:
- write <priceConfig consignprice.ConsignPrice struct{ID string, Index int64, InitialWeight float64, InitialPrice float64, WithinPrice float64, BeyondPrice float64} (StructVariable)>
- write <priceConfig consignprice.ConsignPrice struct{ID string, Index int64, InitialWeight float64, InitialPrice float64, WithinPrice float64, BeyondPrice float64} (StructVariable)>
  from <priceConfig consignprice.ConsignPrice struct{ID string, Index int64, InitialWeight float64, InitialPrice float64, WithinPrice float64, BeyondPrice float64} (StructVariable)>
CONSIGNPRICE_DB.ConsignPrice.Index:
- write <0 int (BasicVariable)> from <priceConfig consignprice.ConsignPrice struct{ID string, Index int64, InitialWeight float64, InitialPrice float64, WithinPrice float64, BeyondPrice float64} (StructVariable)>
- write <Index int64 (FieldVariable)> from <priceConfig consignprice.ConsignPrice struct{ID string, Index int64, InitialWeight float64, InitialPrice float64, WithinPrice float64, BeyondPrice float64} (StructVariable)>
CONTACTS_DB.Contact:
- write <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
- write <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)> from
  <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
CONTACTS_DB.Contact.AccountID:
- write <AccountID string (BasicVariable)> from <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
- write <AccountID string (FieldVariable)> from <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
CONTACTS_DB.Contact.DocumentNumber:
- write <DocumentNumber string (BasicVariable)> from <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
- write <DocumentNumber string (FieldVariable)> from <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
CONTACTS_DB.Contact.DocumentType:
- write <DocumentType int (BasicVariable)> from <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
- write <DocumentType int (FieldVariable)> from <contact contacts.Contact struct{ID string, AccountID string, Name string, DocumentType int, DocumentNumber string, PhoneNumber string} (StructVariable)>
CONTACTS_DB.document:
- read <res NoSQLCursor {database = contacts, collection = contacts} (BlueprintBackendVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <res NoSQLCursor {database = contacts, collection = contacts} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <res NoSQLCursor {database = contacts, collection = contacts} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "accountid" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
D:
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "accountid" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "$and" string, primitive.A} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "routeid" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <routeID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <routeid []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <routeid []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "traintype" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <trainType string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <trainType []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <trainType []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "$and" string, primitive.A} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "routeid" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <routeID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <routeid []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <routeid []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "traintype" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <trainType string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <trainType []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <trainType []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "name" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <name string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <string> @ StationService (Reference)> from <query primitive.D (SliceVariable)>
- read <string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <string> @ StationService (Reference)> from <query primitive.D (SliceVariable)>
- read <string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <struct{ "tripid" string, string} (StructVariable)> from <primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <primitive.D (SliceVariable)>
- read <tripid string (BasicVariable)> from <primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <primitive.D (SliceVariable)>
- read <ID string (BasicVariable)> from <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "stationname" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <station string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "stationname" string, primitive.D} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "$in" string, primitive.A} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <doc primitive.A (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
MONEY_DB.Money:
- write <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
- write <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
  from <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
MONEY_DB.Money.ID:
- write <string (BasicVariable)> from <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
- write <ID string (FieldVariable)> from <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
MONEY_DB.Money.Price:
- write <Price string (BasicVariable)> from <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
- write <Price string (FieldVariable)> from <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
MONEY_DB.Money.UserID:
- write <UserID string (BasicVariable)> from <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
- write <UserID string (FieldVariable)> from <m payment.Money struct{ID string, UserID string, Price string} (StructVariable)>
PAYMENTS_DB.Payment:
- write <payment payment.Payment struct{ID string, OrderID string, UserID string, Price string} (StructVariable)>
- write <payment payment.Payment struct{ID string, OrderID string, UserID string, Price string} (StructVariable)> from <payment payment.Payment struct{ID string, OrderID string, UserID string, Price string} (StructVariable)>
PAYMENTS_DB.Payment.ID:
- write <ID string (BasicVariable)> from <payment payment.Payment struct{ID string, OrderID string, UserID string, Price string} (StructVariable)>
- write <ID string (FieldVariable)> from <payment payment.Payment struct{ID string, OrderID string, UserID string, Price string} (StructVariable)>
PAYMENTS_DB.document:
- read <res NoSQLCursor {database = payment, collection = payment} (BlueprintBackendVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
PRICE_DB.PriceConfig:
- write <pc price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64} (StructVariable)>
- write <pc price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64} (StructVariable)> from <pc price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64} (StructVariable)>
PRICE_DB.PriceConfig.ID:
- write <ID string (BasicVariable)> from <pc price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64} (StructVariable)>
- write <ID string (FieldVariable)> from <pc price.PriceConfig struct{ID string, TrainType string, RouteID string, BasicPriceRate float64, FirstClassPriceRate float64} (StructVariable)>
PRICE_DB.document:
- read <res NoSQLCursor {database = priceConfig, collection = priceConfig} (BlueprintBackendVariable)>
- read <res NoSQLCursor {database = priceConfig, collection = priceConfig} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "$and" string, primitive.A} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "routeid" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <routeID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <routeid []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <routeid []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "traintype" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <trainType string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <trainType []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <trainType []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "$and" string, primitive.A} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "routeid" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <routeID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <routeid []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <routeid []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "traintype" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <trainType string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <trainType []string> @ PriceService (Reference)> from <query primitive.D (SliceVariable)>
- read <trainType []string (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <rt string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <":" string (BasicVariable)> from <query primitive.D (SliceVariable)>
ROUTE_DB.Route:
- write <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
ROUTE_DB.Route.Distances:
- write <distances []int64 (ArrayVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <Distances []int64 (FieldVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
ROUTE_DB.Route.EndStation:
- write <EndStation string (BasicVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <EndStation string (FieldVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
ROUTE_DB.Route.ID:
- write <string (BasicVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <ID string (FieldVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
ROUTE_DB.Route.StartStation:
- write <StartStation string (BasicVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <StartStation string (FieldVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
ROUTE_DB.Route.Stations:
- write <stations []string (SliceVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <StationList string (BasicVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <"," string (BasicVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
- write <Stations []string (FieldVariable)> from <route route.Route struct{ID string, Stations []string, Distances []int64, StartStation string, EndStation string} (StructVariable)>
ROUTE_DB.document:
- read <res NoSQLCursor {database = route, collection = route} (BlueprintBackendVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <primitive.D (SliceVariable)>
- read <ID string (BasicVariable)> from <primitive.D (SliceVariable)>
STATION_DB.Station:
- write <station station.Station struct{ID string, Name string, StayTime int64} (StructVariable)>
- write <station station.Station struct{ID string, Name string, StayTime int64} (StructVariable)>
  from <station station.Station struct{ID string, Name string, StayTime int64} (StructVariable)>
STATION_DB.Station.ID:
- write <ID string (BasicVariable)> from <station station.Station struct{ID string, Name string, StayTime int64} (StructVariable)>
- write <ID string (FieldVariable)> from <station station.Station struct{ID string, Name string, StayTime int64} (StructVariable)>
STATION_DB.document:
- read <res NoSQLCursor {database = station, collection = station} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "name" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <name string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <res NoSQLCursor {database = station, collection = station} (BlueprintBackendVariable)>
- read <res NoSQLCursor {database = station, collection = station} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <string> @ StationService (Reference)> from <query primitive.D (SliceVariable)>
- read <string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <string> @ StationService (Reference)> from <query primitive.D (SliceVariable)>
- read <string (BasicVariable)> from <query primitive.D (SliceVariable)>
STATIONFOOD_DB.StationFoodStore:
- write <store stationfood.StationFoodStore struct{ID string, StationName string, StoreName string, Telephone string, BusinessTime string, DeliveryFee float64, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
- write <store stationfood.StationFoodStore struct{ID string, StationName string, StoreName string, Telephone string, BusinessTime string, DeliveryFee float64, Foods []food.Food struct{Name string, Price float64}} (StructVariable)> from <store stationfood.StationFoodStore struct{ID string, StationName string, StoreName string, Telephone string, BusinessTime string, DeliveryFee float64, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
STATIONFOOD_DB.StationFoodStore.ID:
- write <ID string (BasicVariable)> from <store stationfood.StationFoodStore struct{ID string, StationName string, StoreName string, Telephone string, BusinessTime string, DeliveryFee float64, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
- write <ID string (FieldVariable)> from <store stationfood.StationFoodStore struct{ID string, StationName string, StoreName string, Telephone string, BusinessTime string, DeliveryFee float64, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
STATIONFOOD_DB.document:
- read <res NoSQLCursor {database = stationfood, collection = stationfood} (BlueprintBackendVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <res NoSQLCursor {database = stationfood, collection = stationfood} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "stationname" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <station string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <res NoSQLCursor {database = stationfood, collection = stationfood} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "stationname" string, primitive.D} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "$in" string, primitive.A} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <primitive.A (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <doc primitive.A (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <res NoSQLCursor {database = stationfood, collection = stationfood} (BlueprintBackendVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <primitive.D (SliceVariable)>
TRAIN_DB.TrainType:
- write <tt train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64} (StructVariable)>
- write <tt train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64} (StructVariable)> from <tt train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64} (StructVariable)>
TRAIN_DB.TrainType.Name:
- write <Name string (BasicVariable)> from <tt train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64} (StructVariable)>
- write <Name string (FieldVariable)> from <tt train.TrainType struct{ID string, Name string, EconomyClass int64, ComfortClass int64, AvgSpeed int64} (StructVariable)>
TRAIN_DB.document:
- read <res NoSQLCursor {database = train, collection = train} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
TRAINFOOD_DB.TrainFood:
- write <tf trainfood.TrainFood struct{ID string, TripID string, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
- write <tf trainfood.TrainFood struct{ID string, TripID string, Foods []food.Food struct{Name string, Price float64}} (StructVariable)> from <tf trainfood.TrainFood struct{ID string, TripID string, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
TRAINFOOD_DB.TrainFood.TripID:
- write <TripID string (BasicVariable)> from <tf trainfood.TrainFood struct{ID string, TripID string, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
- write <TripID string (FieldVariable)> from <tf trainfood.TrainFood struct{ID string, TripID string, Foods []food.Food struct{Name string, Price float64}} (StructVariable)>
TRAINFOOD_DB.document:
- read <res NoSQLCursor {database = trainfood, collection = trainfood} (BlueprintBackendVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <res NoSQLCursor {database = trainfood, collection = trainfood} (BlueprintBackendVariable)>
- read <primitive.D (SliceVariable)>
- read <primitive.D (SliceVariable)> from <primitive.D (SliceVariable)>
- read <struct{ "tripid" string, string} (StructVariable)> from <primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <primitive.D (SliceVariable)>
- read <tripid string (BasicVariable)> from <primitive.D (SliceVariable)>
USER_DB.User:
- write <user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string} (StructVariable)>
- write <user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string} (StructVariable)> from
  <user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string} (StructVariable)>
string: []
struct{ "$and" string, primitive.A}: []
struct{ "$in" string, primitive.A}: []
struct{ "accountid" string, string}: []
struct{ "id" string, string}: []
struct{ "name" string, string}: []
struct{ "routeid" string, string}: []
struct{ "stationname" string, primitive.D}: []
struct{ "stationname" string, string}: []
struct{ "traintype" string, string}: []
struct{ "tripid" string, string}: []
