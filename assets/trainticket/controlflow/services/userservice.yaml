(*UserServiceImpl).DeleteUser(ctx context.Context, userID string):
  block 5 (IfDone):
  - (inline) userDB NoSQLDatabase
  - u (*user.UserServiceImpl struct{userDB NoSQLDatabase})
  - ctx context.Context
  - userID string
  - coll NoSQLCollection {database = "user", collection = "user"}
  - err .error
  - (inline) string
  - (inline) struct{ "userid" string, string}
  - query primitive.D
  - err .error
(*UserServiceImpl).FindByUserID(ctx context.Context, userID string):
  block 11 (IfDone):
  - (inline) userDB NoSQLDatabase
  - u (*user.UserServiceImpl struct{userDB NoSQLDatabase})
  - ctx context.Context
  - userID string
  - coll NoSQLCollection {database = "user", collection = "user"}
  - err .error
  - (inline) string
  - (inline) struct{ "userid" string, string}
  - query primitive.D
  - res NoSQLCursor {database = "user", collection = "user"}
  - err .error
  - user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string}
  - exists bool
  - err .error
(*UserServiceImpl).FindByUsername(ctx context.Context, username string):
  block 11 (IfDone):
  - (inline) userDB NoSQLDatabase
  - u (*user.UserServiceImpl struct{userDB NoSQLDatabase})
  - ctx context.Context
  - username string
  - coll NoSQLCollection {database = "user", collection = "user"}
  - err .error
  - (inline) string
  - (inline) struct{ "username" string, string}
  - query primitive.D
  - res NoSQLCursor {database = "user", collection = "user"}
  - err .error
  - user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string}
  - exists bool
  - err .error
(*UserServiceImpl).GetAllUsers(ctx context.Context):
  block 8 (IfDone):
  - (inline) userDB NoSQLDatabase
  - u (*user.UserServiceImpl struct{userDB NoSQLDatabase})
  - ctx context.Context
  - coll NoSQLCollection {database = "user", collection = "user"}
  - err .error
  - res NoSQLCursor {database = "user", collection = "user"}
  - err .error
  - users []user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string}
  - err .error
(*UserServiceImpl).SaveUser(ctx context.Context, user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string}):
 block 2 (IfDone):
  - (inline) userDB NoSQLDatabase
  - u (*user.UserServiceImpl struct{userDB NoSQLDatabase})
  - ctx context.Context
  - |-
    user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string} -->
       W-TAINTED 1x = (USER_DB.User)
  - coll NoSQLCollection {database = "user", collection = "user"}
  - err .error
(*UserServiceImpl).UpdateUser(ctx context.Context, user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string}):
 block 2 (IfDone):
  - (inline) userDB NoSQLDatabase
  - u (*user.UserServiceImpl struct{userDB NoSQLDatabase})
  - ctx context.Context
  - (inline) UserID string
  - (inline) UserID string
  - user user.User struct{UserID string, Username string, Password string, Gender int64, DocumentType int64, DocumentNum string, Email string}
  - coll NoSQLCollection {database = "user", collection = "user"}
  - err .error
  - (inline) "userid" string
  - (inline) "userid" string
  - (inline) struct{ "userid" string, UserID string}
  - query primitive.D
.NewUserServiceImpl(ctx context.Context, db NoSQLDatabase):
  block 0 (Body):
  - ctx context.Context
  - db NoSQLDatabase
