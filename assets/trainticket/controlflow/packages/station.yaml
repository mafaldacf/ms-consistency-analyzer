? (*station.StationServiceImpl).CreateStation(ctx context.Context, station station.Station struct{ID string, Name string, StayTime int64}) error:
 block 11 (IfDone):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - ctx context.Context
  - |-
    (inline) ID string -->
       W-TAINTED 1x = (STATION_DB.Station.ID)
  - |-
    (inline) ID string -->
       W-TAINTED 1x = (STATION_DB.Station.ID)
  - |-
    station station.Station struct{ID string, Name string, StayTime int64} -->
       W-TAINTED 1x = (STATION_DB.Station)
  - coll NoSQLCollection {database = "station", collection = "station"}
  - err .error
  - (inline) "id" string
  - (inline) "id" string
  - (inline) struct{ "id" string, ID string}
  - query primitive.D
  - res NoSQLCursor {database = "station", collection = "station"}
  - err .error
  - st station.Station struct{ID string, Name string, StayTime int64}
  - exists bool
  - err .error
(*station.StationServiceImpl).DeleteStation(ctx context.Context, id string) error:
  block 2 (IfDone):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - ctx context.Context
  - id string
  - coll NoSQLCollection {database = "station", collection = "station"}
  - err .error
  - (inline) string
  - (inline) struct{ "id" string, string}
  - query primitive.D
(*station.StationServiceImpl).Exists(ctx context.Context, name string) (bool, error):
  block 5 (IfDone):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - ctx context.Context
  - name string
  - coll NoSQLCollection {database = "station", collection = "station"}
  - err .error
  - (inline) string
  - (inline) struct{ "name" string, string}
  - query primitive.D
  - |-
    res NoSQLCursor {database = "station", collection = "station"} -->
       R-TAINTED 2x = (STATION_DB.document, STATION_DB.NoSQLCursor)
  - err .error
  - st station.Station struct{ID string, Name string, StayTime int64}
  - exists bool
  - err .error
(*station.StationServiceImpl).FindByID(ctx context.Context, id string) (station.Station struct{ID string, Name string, StayTime int64}, error):
 block 11 (IfDone):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - (inline) ref <ctx context.Context> @ StationService
  - ctx context.Context
  - (inline) ref <string> @ StationService
  - id string
  - coll NoSQLCollection {database = "station", collection = "station"}
  - err .error
  - (inline) string
  - (inline) struct{ "id" string, string}
  - query primitive.D
  - |-
    res NoSQLCursor {database = "station", collection = "station"} -->
       R-TAINTED 2x = (STATION_DB.document, STATION_DB.NoSQLCursor)
  - err .error
  - st station.Station struct{ID string, Name string, StayTime int64}
  - exists bool
  - err .error
(*station.StationServiceImpl).FindByIDs(ctx context.Context, ids []string) ([]station.Station struct{ID string, Name string, StayTime int64}, error):
 block 0 (Body):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - ctx context.Context
  - ids []string
  - (inline) st station.Station struct{ID string, Name string, StayTime int64}
  - stations []station.Station struct{ID string, Name string, StayTime int64}
  - _ .error
  - (inline) st station.Station struct{ID string, Name string, StayTime int64}
  - stations []station.Station struct{ID string, Name string, StayTime int64}
(*station.StationServiceImpl).FindID(ctx context.Context, name string) (string, error):
  block 11 (IfDone):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - (inline) ref <ctx context.Context> @ StationService
  - ctx context.Context
  - (inline) ref <string> @ StationService
  - name string
  - coll NoSQLCollection {database = "station", collection = "station"}
  - err .error
  - (inline) string
  - (inline) struct{ "name" string, string}
  - query primitive.D
  - |-
    res NoSQLCursor {database = "station", collection = "station"} -->
       R-TAINTED 2x = (STATION_DB.document, STATION_DB.NoSQLCursor)
  - err .error
  - st station.Station struct{ID string, Name string, StayTime int64}
  - exists bool
  - err .error
(*station.StationServiceImpl).FindIDs(ctx context.Context, names []string) ([]string, error):
  block 0 (Body):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - ctx context.Context
  - names []string
  - (inline) id string
  - ids []string
  - _ .error
  - (inline) id string
  - ids []string
(*station.StationServiceImpl).UpdateStation(ctx context.Context, station station.Station struct{ID string, Name string, StayTime int64}) (bool, error):
 block 2 (IfDone):
  - (inline) stationDB NoSQLDatabase
  - s (*station.StationServiceImpl struct{stationDB NoSQLDatabase})
  - ctx context.Context
  - (inline) ID string
  - (inline) ID string
  - station station.Station struct{ID string, Name string, StayTime int64}
  - coll NoSQLCollection {database = "station", collection = "station"}
  - err .error
  - (inline) "id" string
  - (inline) "id" string
  - (inline) struct{ "id" string, ID string}
  - query primitive.D
station.NewStationServiceImpl(ctx context.Context, db NoSQLDatabase) ((*station.StationServiceImpl struct{stationDB NoSQLDatabase}), error):
 block 0 (Body):
  - ctx context.Context
  - db NoSQLDatabase
