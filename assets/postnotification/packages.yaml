packages:
- blueprint:
    backend:
    - metadata:
      - package: backend
      - package path: github.com/blueprint-uservices/blueprint/runtime/core/backend
      - module: github.com/blueprint-uservices/blueprint/runtime
    - declared types:
      - Cache interface{ Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{}) }
      - NoSQLCollection interface{}
      - NoSQLCursor interface{}
      - NoSQLDatabase interface{ NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string) }
      - Queue interface{ Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{}) }
- application:
    common:
    - metadata:
      - package: common
      - package path: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification/common
      - module: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow
      - files:
        - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/common/utils.go
      - imports:
        - strconv
    - imported types:
      - .error
    - declared types: []
    - declared variables: []
    postnotification:
    - metadata:
      - package: postnotification
      - package path: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification
      - module: github.com/blueprint-uservices/blueprint/examples/postnotification/workflow
      - files:
        - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/NotifyService.go
        - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/StorageService.go
        - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/UploadService.go
        - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/postnotification/workflow/postnotification/models.go
      - imports:
        - context
        - github.com/blueprint-uservices/blueprint/examples/postnotification/workflow/postnotification/common
        - github.com/blueprint-uservices/blueprint/runtime/core/backend
        - go.mongodb.org/mongo-driver/bson
        - math/rand
        - strconv
        - sync
    - imported types:
      - .error
      - Cache interface{ Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{}) }
      - NoSQLCollection interface{}
      - NoSQLCursor interface{}
      - NoSQLDatabase interface{ NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string) }
      - Queue interface{ Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{}) }
      - context.Context
      - primitive.D
      - sync.WaitGroup
    - declared types:
      - postnotification.Message struct { ReqID string, PostID string, Timestamp string }
      - postnotification.NotifyService
      - postnotification.NotifyServiceImpl struct { storageService postnotification.StorageService, queue Queue interface{ Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{}) }, numWorkers int }
      - postnotification.Post struct { ReqID int64, PostID int64, Text string, Timestamp int64, Creator string }
      - postnotification.StorageService
      - postnotification.StorageServiceImpl struct { cache Cache interface{ Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{}) }, db NoSQLDatabase interface{ NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string) } }
      - postnotification.UploadService
      - postnotification.UploadServiceImpl struct { storageService postnotification.StorageService, queue Queue interface{ Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{}) } }
    - declared variables: []
