backend:
- package: backend
- package path: github.com/blueprint-uservices/blueprint/runtime/core/backend
- module: github.com/blueprint-uservices/blueprint/runtime
- declared types:
  - Cache { instance = <nil> } interface{ Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{}) }
  - NoSQLCollection { instance = <nil> } interface{ NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D) }
  - NoSQLCursor { instance = <nil> } interface{ NoSQLDatabase.One(ctx context.Context, obj interface{}), NoSQLDatabase.All(ctx context.Context, obj interface{}) }
  - NoSQLDatabase { instance = <nil> } interface{ NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string) }
  - Queue { instance = <nil> } interface{ Queue.Push(ctx context.Context, item interface{}),
    Queue.Pop(ctx context.Context, item interface{}) }
- datastore types:
  - Cache { instance = <nil> } interface{ Cache.Put(ctx context.Context, key string, value interface{}), Cache.Get(ctx context.Context, key string, value interface{}) }
  - NoSQLCollection { instance = <nil> } interface{ NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D) }
  - NoSQLCursor { instance = <nil> } interface{ NoSQLDatabase.One(ctx context.Context, obj interface{}), NoSQLDatabase.All(ctx context.Context, obj interface{}) }
  - NoSQLDatabase { instance = <nil> } interface{ NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string) }
  - Queue { instance = <nil> } interface{ Queue.Push(ctx context.Context, item interface{}),
    Queue.Pop(ctx context.Context, item interface{}) }
