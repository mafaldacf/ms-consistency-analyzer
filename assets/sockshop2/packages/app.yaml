"":
- package: ""
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/...
- module: ""
- files: []
- imports: []
- imported types: []
- declared types: []
- service types: []
- datastore types: []
- declared variables: []
- parsed methods: []
cart:
- package: cart
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/cart
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/cart/cartservice.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/cart/types.go
- imports:
  - context
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - go.mongodb.org/mongo-driver/bson
- imported types:
  - .error
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - context.Context
  - primitive.D
  - primitive.E
- declared types:
  - cart.CartService
  - cart.Item struct{ID string, Quantity int, UnitPrice float32}
  - cart.cart struct{ID string, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}}
  - cart.cartImpl struct{db {instance = cart_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
- service types:
  - cart.CartService
- datastore types:
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
- declared variables: []
- parsed methods:
  - (*cart.cartImpl).AddItem(ctx context.Context, customerID string, item cart.Item struct{ID string, Quantity int, UnitPrice float32}) (cart.Item struct{ID string, Quantity int, UnitPrice float32}, error)
  - (*cart.cartImpl).DeleteCart(ctx context.Context, customerID string) error
  - (*cart.cartImpl).GetCart(ctx context.Context, customerID string) ([]cart.Item struct{ID string, Quantity int, UnitPrice float32}, error)
  - (*cart.cartImpl).GetItem(ctx context.Context, customerID string, itemID string)
    (cart.Item struct{ID string, Quantity int, UnitPrice float32}, error)
  - (*cart.cartImpl).MergeCarts(ctx context.Context, customerID string, sessionID string) error
  - (*cart.cartImpl).RemoveItem(ctx context.Context, customerID string, itemID string)
    error
  - (*cart.cartImpl).UpdateItem(ctx context.Context, customerID string, item cart.Item struct{ID string, Quantity int, UnitPrice float32}) error
  - cart.NewCartService(ctx context.Context, db NoSQLDatabase) (cart.CartService, error)
catalogue:
- package: catalogue
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/catalogue
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/catalogue/catalogueservice.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/catalogue/types.go
- imports:
  - context
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - go.mongodb.org/mongo-driver/bson
  - strings
- imported types:
  - .error
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - context.Context
  - primitive.D
  - primitive.E
- declared types:
  - catalogue.CatalogueService
  - catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}
  - catalogue.catalogueImpl struct{catalogue_db {instance = catalogue_db} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
  - catalogue.tag struct{ID int, Name string}
- service types:
  - catalogue.CatalogueService
- datastore types:
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
- declared variables: []
- parsed methods:
  - (*catalogue.catalogueImpl).AddSock(ctx context.Context, sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string})
    (string, error)
  - (*catalogue.catalogueImpl).AddTags(ctx context.Context, tags []string) error
  - (*catalogue.catalogueImpl).Count(ctx context.Context, tags []string) (int, error)
  - (*catalogue.catalogueImpl).DeleteSock(ctx context.Context, id string) error
  - (*catalogue.catalogueImpl).Get(ctx context.Context, id string) (catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}, error)
  - (*catalogue.catalogueImpl).List(ctx context.Context, tags []string, order string, pageNum int, pageSize int) ([]catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}, error)
  - (*catalogue.catalogueImpl).Tags(ctx context.Context) ([]string, error)
  - catalogue.NewCatalogueService(ctx context.Context, catalogue_db NoSQLDatabase)
    (catalogue.CatalogueService, error)
frontend:
- package: frontend
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/frontend
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/frontend/frontend.go
- imports:
  - context
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/cart
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/catalogue
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/order
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/user
  - github.com/google/uuid
- imported types:
  - .error
  - cart.CartService
  - cart.Item struct{ID string, Quantity int, UnitPrice float32}
  - catalogue.CatalogueService
  - catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}
  - context.Context
  - order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string},
    Card user.Card struct{LongNum string, Expires string, CCV string, ID string},
    Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment
    shipping.Shipment struct{ID string, Name string, Status string}, Date string,
    Total float32}
  - order.OrderService
  - shipping.Shipment struct{ID string, Name string, Status string}
  - user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
  - user.Card struct{LongNum string, Expires string, CCV string, ID string}
  - user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}
  - user.UserService
- declared types:
  - frontend.FrontendImpl struct{user user.UserService, catalogue catalogue.CatalogueService, cart cart.CartService, order order.OrderService}
  - frontend.FrontendService
- service types:
  - cart.CartService
  - catalogue.CatalogueService
  - frontend.FrontendService
  - order.OrderService
  - user.UserService
- datastore types: []
- declared variables: []
- parsed methods:
  - (*frontend.FrontendImpl).AddItem(ctx context.Context, sessionID string, itemID string) (string, error)
  - (*frontend.FrontendImpl).DeleteCart(ctx context.Context, sessionID string) error
  - (*frontend.FrontendImpl).GetAddress(ctx context.Context, addressID string) (user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, error)
  - (*frontend.FrontendImpl).GetCard(ctx context.Context, cardID string) (user.Card struct{LongNum string, Expires string, CCV string, ID string}, error)
  - (*frontend.FrontendImpl).GetCart(ctx context.Context, sessionID string) ([]cart.Item struct{ID string, Quantity int, UnitPrice float32}, error)
  - (*frontend.FrontendImpl).GetOrder(ctx context.Context, orderID string) (order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32}, error)
  - (*frontend.FrontendImpl).GetOrders(ctx context.Context, userID string) ([]order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32}, error)
  - (*frontend.FrontendImpl).GetSock(ctx context.Context, itemID string) (catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}, error)
  - (*frontend.FrontendImpl).GetUser(ctx context.Context, userID string) (user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, error)
  - (*frontend.FrontendImpl).ListItems(ctx context.Context, tags []string, order string, pageNum int, pageSize int) ([]catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}, error)
  - (*frontend.FrontendImpl).ListTags(ctx context.Context) ([]string, error)
  - (*frontend.FrontendImpl).LoadCatalogue(ctx context.Context) (string, error)
  - (*frontend.FrontendImpl).Login(ctx context.Context, sessionID string, username string, password string) (string, user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, error)
  - (*frontend.FrontendImpl).NewOrder(ctx context.Context, userID string, addressID string, cardID string, cartID string) (order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32}, error)
  - (*frontend.FrontendImpl).PostAddress(ctx context.Context, userID string, address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}) (string, error)
  - (*frontend.FrontendImpl).PostCard(ctx context.Context, userID string, card user.Card struct{LongNum string, Expires string, CCV string, ID string}) (string, error)
  - (*frontend.FrontendImpl).Register(ctx context.Context, sessionID string, username string, password string, email string, first string, last string) (string, error)
  - (*frontend.FrontendImpl).RemoveItem(ctx context.Context, sessionID string, itemID string) error
  - (*frontend.FrontendImpl).UpdateItem(ctx context.Context, sessionID string, itemID string, quantity int) (string, error)
  - frontend.NewFrontend(ctx context.Context, user user.UserService, catalogue catalogue.CatalogueService, cart cart.CartService, order order.OrderService) (frontend.FrontendService, error)
order:
- package: order
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/order
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/order/orderservice.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/order/types.go
- imports:
  - context
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/cart
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/payment
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/shipping
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/user
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - github.com/google/uuid
  - go.mongodb.org/mongo-driver/bson
  - sync
  - time
- imported types:
  - .error
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - atomic.Uint64
  - atomic.align64
  - atomic.noCopy
  - cart.CartService
  - cart.Item struct{ID string, Quantity int, UnitPrice float32}
  - context.Context
  - payment.Authorisation struct{Authorised bool, Message string}
  - payment.PaymentService
  - primitive.D
  - primitive.E
  - shipping.Shipment struct{ID string, Name string, Status string}
  - shipping.ShippingService
  - sync.WaitGroup
  - sync.noCopy
  - user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
  - user.Card struct{LongNum string, Expires string, CCV string, ID string}
  - user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}
  - user.UserService
- declared types:
  - order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string},
    Card user.Card struct{LongNum string, Expires string, CCV string, ID string},
    Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment
    shipping.Shipment struct{ID string, Name string, Status string}, Date string,
    Total float32}
  - order.OrderService
  - order.orderImpl struct{users user.UserService, carts cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, db {instance = order_db}
    interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
- service types:
  - cart.CartService
  - order.OrderService
  - payment.PaymentService
  - shipping.ShippingService
  - user.UserService
- datastore types:
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
- declared variables: []
- parsed methods:
  - (*order.orderImpl).GetOrder(ctx context.Context, orderID string) (order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32}, error)
  - (*order.orderImpl).GetOrders(ctx context.Context, customerID string) ([]order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32}, error)
  - (*order.orderImpl).NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string) (order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32}, error)
  - order.NewOrderService(ctx context.Context, userService user.UserService, cartService cart.CartService, payments payment.PaymentService, shipping shipping.ShippingService, orderDB NoSQLDatabase) (order.OrderService, error)
payment:
- package: payment
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/payment
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/payment/paymentservice.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/payment/types.go
- imports:
  - context
- imported types:
  - context.Context
- declared types:
  - payment.Authorisation struct{Authorised bool, Message string}
  - payment.PaymentService
  - payment.paymentImpl struct{declineOverAmount float32}
- service types:
  - payment.PaymentService
- datastore types: []
- declared variables: []
- parsed methods:
  - (*payment.paymentImpl).Authorise(ctx context.Context, amount float32) (payment.Authorisation struct{Authorised bool, Message string}, error)
  - payment.NewPaymentService(ctx context.Context, declineOverAmount string) (payment.PaymentService, error)
queuemaster:
- package: queuemaster
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/queuemaster
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/queuemaster/queuemaster.go
- imports:
  - context
  - github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/shipping
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
- imported types:
  - .error
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
  - context.Context
  - shipping.Shipment struct{ID string, Name string, Status string}
  - shipping.ShippingService
- declared types:
  - queuemaster.QueueMaster
  - queuemaster.queueMasterImpl struct{q {instance = shipqueue} interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})},
    shipping shipping.ShippingService, exitOnError bool, processed int32}
- service types:
  - queuemaster.QueueMaster
  - shipping.ShippingService
- datastore types:
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
- declared variables: []
- parsed methods:
  - (*queuemaster.queueMasterImpl).Run(ctx context.Context) error
  - queuemaster.NewQueueMaster(ctx context.Context, queue Queue, shipping shipping.ShippingService)
    (queuemaster.QueueMaster, error)
shipping:
- package: shipping
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/shipping
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/shipping/shippingservice.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/shipping/types.go
- imports:
  - context
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - go.mongodb.org/mongo-driver/bson
- imported types:
  - .error
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
  - context.Context
  - primitive.D
  - primitive.E
- declared types:
  - shipping.Shipment struct{ID string, Name string, Status string}
  - shipping.ShippingService
  - shipping.shippingImpl struct{q {instance = shipqueue} interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})},
    db  {instance = shipdb} interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
- service types:
  - shipping.ShippingService
- datastore types:
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - Queue interface{Queue.Push(ctx context.Context, item interface{}), Queue.Pop(ctx context.Context, item interface{})}
- declared variables: []
- parsed methods:
  - (*shipping.shippingImpl).GetShipment(ctx context.Context, id string) (shipping.Shipment struct{ID string, Name string, Status string}, error)
  - (*shipping.shippingImpl).PostShipping(ctx context.Context, shipment shipping.Shipment struct{ID string, Name string, Status string}) (shipping.Shipment struct{ID string, Name string, Status string}, error)
  - (*shipping.shippingImpl).UpdateStatus(ctx context.Context, id string, status string)
    error
  - shipping.NewShippingService(ctx context.Context, queue Queue, db NoSQLDatabase)
    (shipping.ShippingService, error)
user:
- package: user
- package path: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow/user
- module: github.com/blueprint-uservices/blueprint/examples/sockshop2/workflow
- files:
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/user/types.go
  - /Users/mafaldacf/workspace/ms-consistency-analyzer/blueprint/examples/sockshop2/workflow/user/userservice.go
- imports:
  - context
  - errors
  - github.com/blueprint-uservices/blueprint/runtime/core/backend
  - go.mongodb.org/mongo-driver/bson
- imported types:
  - .error
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
  - context.Context
  - primitive.D
  - primitive.E
- declared types:
  - user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}
  - user.Card struct{LongNum string, Expires string, CCV string, ID string}
  - user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}
  - user.UserService
  - user.userServiceImpl struct{UserService user.UserService, db {instance = user_db}
    interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}}
- service types:
  - user.UserService
- datastore types:
  - NoSQLCollection interface{NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.FindMany(ctx context.Context, filter bson.D, projection bson.D), NoSQLDatabase.Upsert(ctx context.Context, filter bson.D, document interface{}), NoSQLDatabase.UpdateOne(ctx context.Context, filter bson.D, update bson.D), NoSQLDatabase.ReplaceOne(ctx context.Context, filter bson.D, interface{}),
    NoSQLDatabase.InsertOne(ctx context.Context, document interface{}), NoSQLDatabase.DeleteOne(ctx context.Context, filter bson.D), NoSQLDatabase.DeleteMany(ctx context.Context, filter bson.D)}
  - NoSQLCursor interface{NoSQLDatabase.One(ctx context.Context, obj interface{}),
    NoSQLDatabase.All(ctx context.Context, obj interface{})}
  - NoSQLDatabase interface{NoSQLDatabase.GetCollection(ctx context.Context, db_name string, collection_name string)}
- declared variables: []
- parsed methods:
  - (*user.userServiceImpl).Delete(ctx context.Context, entity string, id string)
    error
  - (*user.userServiceImpl).GetAddresses(ctx context.Context, addressid string) ([]user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, error)
  - (*user.userServiceImpl).GetCards(ctx context.Context, cardid string) ([]user.Card struct{LongNum string, Expires string, CCV string, ID string}, error)
  - (*user.userServiceImpl).GetUsers(ctx context.Context, userid string) ([]user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, error)
  - (*user.userServiceImpl).Login(ctx context.Context, username string, password string)
    (user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, error)
  - (*user.userServiceImpl).PostAddress(ctx context.Context, userid string, address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}) (string, error)
  - (*user.userServiceImpl).PostCard(ctx context.Context, userid string, card user.Card struct{LongNum string, Expires string, CCV string, ID string}) (string, error)
  - (*user.userServiceImpl).PostUser(ctx context.Context, u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}) (string, error)
  - (*user.userServiceImpl).Register(ctx context.Context, username string, password string, email string, first string, last string) (string, error)
  - user.NewUserServiceImpl(ctx context.Context, db NoSQLDatabase) (user.UserService, error)
