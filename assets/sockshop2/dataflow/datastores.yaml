"": []
'"addressid" string': []
'"id" string': []
'"userid" string': []
CATALOGUE_DB.Sock:
- write <sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string} (StructVariable)>
- write <sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string} (StructVariable)> from <sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string} (StructVariable)>
- write <ref <sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string}> @ FrontendService (Reference)> from <sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string} (StructVariable)>
- write <sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string} (StructVariable)> from <sock catalogue.Sock struct{ID string, Name string, Description string, ImageURL []string, ImageURL_1 string, ImageURL_2 string, Price float32, Quantity int, Tags []string, TagString string} (StructVariable)>
CATALOGUE_DB.document:
- read <result NoSQLCursor {database = catalogue, collection = catalogue} (BlueprintBackendVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <result NoSQLCursor {database = catalogue, collection = catalogue} (BlueprintBackendVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <result NoSQLCursor {database = catalogue, collection = catalogue} (BlueprintBackendVariable)>
- read <result NoSQLCursor {database = catalogue, collection = catalogue} (BlueprintBackendVariable)>
- read <result NoSQLCursor {database = catalogue, collection = catalogue} (BlueprintBackendVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{Key "id" string, Value string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <Key "id" string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <"id" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{Key "id" string, Value string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <Key "id" string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <"id" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{Key "id" string, Value string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <Key "id" string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <"id" string (BasicVariable)> from <query primitive.D (SliceVariable)>
D:
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{Key "userid" string, Value string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <Key "userid" string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <"userid" string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <userid string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <customerID string> @ OrderService (Reference)> from <filter primitive.D (SliceVariable)>
- read <customerID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <userID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <userID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <userID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <userID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{Key "addressid" string, Value string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <Key "addressid" string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <"addressid" string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <cardid string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <cardID string> @ OrderService (Reference)> from <filter primitive.D (SliceVariable)>
- read <cardID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <cardID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <cardID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <cardID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <cardID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{Key "id" string, Value string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <Key "id" string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <"id" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{Key "id" string, Value string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <Key "id" string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <"id" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)>
- read <query primitive.D (SliceVariable)> from <query primitive.D (SliceVariable)>
- read <struct{Key "id" string, Value string} (StructVariable)> from <query primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <id string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <ref <itemID string> @ FrontendService (Reference)> from <query primitive.D (SliceVariable)>
- read <itemID string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <Key "id" string (FieldVariable)> from <query primitive.D (SliceVariable)>
- read <"id" string (BasicVariable)> from <query primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{ "customerid" string, string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <customerID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <userID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <userID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <orderID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <orderID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <orderID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{Key "addressid" string, Value string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <Key "addressid" string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <"addressid" string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <addressid string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <addressID string> @ OrderService (Reference)> from <filter primitive.D (SliceVariable)>
- read <addressID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <addressID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <addressID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <addressID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <addressID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
Key: []
ORDER_DB.Order:
- write <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.Address:
- write <addresses []user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string} (SliceVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <Address []user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string} (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.Card:
- write <cards []user.Card struct{LongNum string, Expires string, CCV string, ID string} (SliceVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <Card []user.Card struct{LongNum string, Expires string, CCV string, ID string} (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.CustomerID:
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <userID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <CustomerID string (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.Date:
- write <string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <Date string (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.ID:
- write <ID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ID string (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.Items:
- write <items []cart.Item struct{ID string, Quantity int, UnitPrice float32} (SliceVariable)>
  from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <Items []cart.Item struct{ID string, Quantity int, UnitPrice float32} (FieldVariable)>
  from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.Shipment:
- write <Shipment shipping.Shipment struct{ID string, Name string, Status string} (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.Shipment.ID:
- write <ID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ID string (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.Order.Total:
- write <amount 10 float32 (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <Total 10 float32 (FieldVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
ORDER_DB.document:
- read <cursor NoSQLCursor {database = order_service, collection = orders} (BlueprintBackendVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{ "customerid" string, string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <customerID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <userID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <userID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <cursor NoSQLCursor {database = order_service, collection = orders} (BlueprintBackendVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{ "id" string, string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <orderID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <orderID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <orderID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
SHIPDB.Shipment:
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <shipment shipping.Shipment struct{ID string, Name string, Status string}>
  @ OrderService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <shipment shipping.Shipment struct{ID string, Name string, Status string}>
  @ OrderService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
SHIPDB.Shipment.ID:
- write <string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ID string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ID string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
SHIPDB.Shipment.Name:
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <userID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <Name string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <Name string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
SHIPDB.Shipment.Status:
- write <"awaiting shipment" string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <"awaiting shipment" string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <Status "awaiting shipment" string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <Status "awaiting shipment" string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
SHIPQUEUE.Shipment:
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <shipment shipping.Shipment struct{ID string, Name string, Status string}>
  @ OrderService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <shipment shipping.Shipment struct{ID string, Name string, Status string}>
  @ OrderService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
SHIPQUEUE.Shipment.ID:
- write <string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ID string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ID string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
SHIPQUEUE.Shipment.Name:
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <userID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <Name string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <Name string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
SHIPQUEUE.Shipment.Status:
- write <"awaiting shipment" string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <"awaiting shipment" string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <Status "awaiting shipment" string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <Status "awaiting shipment" string (FieldVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
USER_DB.User:
- write <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
  from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.User.Addresses:
- write <Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string} (FieldVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string} (StructVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.User.Cards:
- write <Cards user.Card struct{LongNum string, Expires string, CCV string, ID string} (FieldVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <user.Card struct{LongNum string, Expires string, CCV string, ID string} (StructVariable)>
  from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.User.Email:
- write <email string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <ref <email string> @ FrontendService (Reference)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <email string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <Email string (FieldVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.User.FirstName:
- write <first string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <ref <first string> @ FrontendService (Reference)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <first string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <FirstName string (FieldVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.User.LastName:
- write <last string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <ref <last string> @ FrontendService (Reference)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <last string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <LastName string (FieldVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.User.Password:
- write <password string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <ref <password string> @ FrontendService (Reference)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <password string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <Password string (FieldVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.User.Username:
- write <username string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <ref <username string> @ FrontendService (Reference)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <username string (BasicVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
- write <Username string (FieldVariable)> from <u user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string} (StructVariable)>
USER_DB.document:
- read <result NoSQLCursor {database = users, collection = users} (BlueprintBackendVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{Key "userid" string, Value string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <Key "userid" string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <"userid" string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <userid string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <customerID string> @ OrderService (Reference)> from <filter primitive.D (SliceVariable)>
- read <customerID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <userID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <userID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <userID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <userID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <result NoSQLCursor {database = users, collection = users} (BlueprintBackendVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{Key "addressid" string, Value string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <Key "addressid" string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <"addressid" string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <cardid string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <cardID string> @ OrderService (Reference)> from <filter primitive.D (SliceVariable)>
- read <cardID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <cardID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <cardID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <cardID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <cardID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <result NoSQLCursor {database = users, collection = users} (BlueprintBackendVariable)>
- read <filter primitive.D (SliceVariable)>
- read <filter primitive.D (SliceVariable)> from <filter primitive.D (SliceVariable)>
- read <struct{Key "addressid" string, Value string} (StructVariable)> from <filter primitive.D (SliceVariable)>
- read <Key "addressid" string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <"addressid" string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <Value string (FieldVariable)> from <filter primitive.D (SliceVariable)>
- read <addressid string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <addressID string> @ OrderService (Reference)> from <filter primitive.D (SliceVariable)>
- read <addressID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <addressID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <addressID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
- read <ref <addressID string> @ FrontendService (Reference)> from <filter primitive.D (SliceVariable)>
- read <addressID string (BasicVariable)> from <filter primitive.D (SliceVariable)>
Value: []
string:
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <userID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <userID string (BasicVariable)> from <shipment shipping.Shipment struct{ID string, Name string, Status string} (StructVariable)>
- write <customerID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <ref <userID string> @ FrontendService (Reference)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
- write <userID string (BasicVariable)> from <order order.Order struct{ID string, CustomerID string, Customer user.User struct{FirstName string, LastName string, Email string, Username string, Password string, Addresses user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Cards user.Card struct{LongNum string, Expires string, CCV string, ID string}, UserID string, Salt string}, Address user.Address struct{Street string, Number string, Country string, City string, PostCode string, ID string}, Card user.Card struct{LongNum string, Expires string, CCV string, ID string}, Items []cart.Item struct{ID string, Quantity int, UnitPrice float32}, Shipment shipping.Shipment struct{ID string, Name string, Status string}, Date string, Total float32} (StructVariable)>
struct{ "customerid" string, string}: []
struct{ "id" string, string}: []
struct{Key "addressid" string, Value string}: []
struct{Key "id" string, Value string}: []
struct{Key "userid" string, Value string}: []
