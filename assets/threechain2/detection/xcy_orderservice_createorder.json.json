{
  "xcy_inconsistencies": [
    {
      "write": {
        "service": "OrderService",
        "method": "NoSQLDatabase.InsertOne(ctx context.Context, document interface{})",
        "key": "order threechain2.Order",
        "object": "order threechain2.Order",
        "database": "stock_db MongoDB (NoSQLDatabase)"
      },
      "read": {
        "service": "OrderService",
        "method": "NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D)",
        "key": "query go.mongodb.org/mongo-driver/bson/primitive.D",
        "object": "result github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLCursor",
        "database": "stock_db MongoDB (NoSQLDatabase)"
      },
      "dataflows_in_path": [
        "[indirect] write(OrderService, stock_db.Order.OrderID)",
        "[indirect] write(OrderService, shipment_queue.ShipmentMessage.OrderID)",
        "[indirect] read(ShipmentService, shipment_queue.ShipmentMessage.OrderID)",
        "[indirect] write(ShipmentService, shipment_db.Shipment.OrderID)",
        "[indirect] read(OrderService, stock_db.interface{})"
      ]
    }
  ],
  "writes": [
    {
      "service": "OrderService",
      "method": "NoSQLDatabase.InsertOne(ctx context.Context, document interface{})",
      "key": "order threechain2.Order",
      "object": "order threechain2.Order",
      "database": "stock_db MongoDB (NoSQLDatabase)"
    },
    {
      "service": "OrderService",
      "method": "Queue.Push(ctx context.Context, item interface{})",
      "key": "message threechain2.ShipmentMessage",
      "object": "message threechain2.ShipmentMessage",
      "database": "shipment_queue RabbitMQ (Queue)"
    },
    {
      "service": "ShipmentService",
      "method": "NoSQLDatabase.InsertOne(ctx context.Context, document interface{})",
      "key": "shipment threechain2.Shipment",
      "object": "shipment threechain2.Shipment",
      "database": "shipment_db MongoDB (NoSQLDatabase)"
    }
  ],
  "reads": [
    {
      "service": "ShipmentService",
      "method": "Queue.Pop(ctx context.Context, item interface{})",
      "key": "event (\u0026map[string]interface{})",
      "object": "event (\u0026map[string]interface{})",
      "database": "shipment_queue RabbitMQ (Queue)"
    },
    {
      "service": "OrderService",
      "method": "NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D)",
      "key": "query go.mongodb.org/mongo-driver/bson/primitive.D",
      "object": "result github.com/blueprint-uservices/blueprint/runtime/core/backend.NoSQLCursor",
      "database": "stock_db MongoDB (NoSQLDatabase)"
    }
  ]
}