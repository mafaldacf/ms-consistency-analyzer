(*AnalyticsServiceImpl).Run(ctx context.Context):
- (*shopping_app.AnalyticsServiceImpl).workerThread(ctx context.Context) error
(*AnalyticsServiceImpl).updateAnalytics(ctx context.Context, message shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string}):
	- NoSQLDatabase.FindOne(ctx context.Context, filter bson.D, projection bson.D) (NoSQLCursor {database = analytics_database, collection = analytics_collection}, interface{})
  - NoSQLDatabase.InsertOne(ctx context.Context, document interface{}) interface{}
(*AnalyticsServiceImpl).workerThread(ctx context.Context):
- Queue.Pop(ctx context.Context, item interface{}) (err, interface{})
- (*shopping_app.AnalyticsServiceImpl).updateAnalytics(ctx context.Context, message shopping_app.AnalyticsMessage struct{UserID string, ProductCategory string}) error
.NewAnalyticsServiceImpl(ctx context.Context, analytics_db NoSQLDatabase, analytics_queue Queue): []
.NewBillingServiceImpl(ctx context.Context, bill_db NoSQLDatabase): []
.NewCartServiceImpl(ctx context.Context, order_service shopping_app.OrderService, product_service shopping_app.ProductService, cart_db NoSQLDatabase):
 []
.NewFrontendImpl(ctx context.Context, order_service shopping_app.OrderService, cart_service shopping_app.CartService): []
.NewOrderServiceImpl(ctx context.Context, stock_service shopping_app.StockService, billing_service shopping_app.BillingService, product_service shopping_app.ProductService, order_db NoSQLDatabase, shipment_queue Queue, analytics_queue Queue):
 []
.NewProductServiceImpl(ctx context.Context, product_db NoSQLDatabase): []
.NewShipmentServiceImpl(ctx context.Context, order_service shopping_app.OrderService, shipment_db NoSQLDatabase, shipment_queue Queue):
 []
.NewStockServiceImpl(ctx context.Context, stock_db NoSQLDatabase): []
